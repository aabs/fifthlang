<#
    var genNs = ns + "_generated";
#>
namespace <#=genNs#>;
using <#=ns#>;
using ast_model.Symbols;
using ast_model.TypeSystem;

public interface ITypeChecker
{
<#
foreach (string astNodeType in asts.Select(a=>a.Name))
{
#>
    public FifthType Infer(ScopeAstThing scope, <#= astNodeType #> node);
<#
}
#>
}

public abstract class FunctionalTypeChecker : ITypeChecker
{

    public FifthType Infer(AstThing exp)
    {
        if (exp == null) return default;
        var scope = exp.NearestScope();
        return exp switch
        {
<# foreach (string astNodeType in asts.Select(a=>a.Name))  { #>
            <#= astNodeType #> node => Infer(scope, node),
<# } #>

            { } node => throw new ast_model.TypeCheckingException("Unrecognised type")
        };
    }

<#
foreach (string astNodeType in asts.Select(a=>a.Name))
{
#>
    public abstract FifthType Infer(ScopeAstThing scope, <#= astNodeType #> node);
<#
}
#>

}
