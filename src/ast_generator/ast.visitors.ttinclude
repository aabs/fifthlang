namespace ast_generated;
//ploppy
using ast_model;
using System.Collections.Generic;

public interface IAstVisitor
{
<# foreach (var ast in asts)  { #>
    public void Enter<#= ast.Name #>(<#= ast.Name #> ctx);
    public void Leave<#= ast.Name #>(<#= ast.Name #> ctx);
<# } #>
}

public partial class BaseAstVisitor : IAstVisitor
{
<# foreach (var ast in asts)  { #>
    public virtual void Enter<#= ast.Name #>(<#= ast.Name #> ctx){}
    public virtual void Leave<#= ast.Name #>(<#= ast.Name #> ctx){}
<# } #>
}


public interface IAstRecursiveDescentVisitor
{
    public AstThing Visit(AstThing ctx);
<# foreach (var ast in asts)  { #>
    public <#= ast.Name #> Visit<#= ast.Name #>(<#= ast.Name #> ctx);
<# } #>
}

public class DefaultRecursiveDescentVisitor : IAstRecursiveDescentVisitor
{
    public virtual AstThing Visit(AstThing ctx){
        if(ctx == null) return ctx;
        return ctx switch
        {
<# foreach (string astNodeType in asts.Select(a=>a.Name))  { #>
             <#= astNodeType #> node => Visit<#= astNodeType #>(node),
<# } #>

            { } node => null,
        };
    }

<#

foreach (var ast in asts)
{
    var allProps = ast.VisitableProperties();
#>
    public virtual <#= ast.Name #> Visit<#= ast.Name #>(<#= ast.Name #> ctx)
    {
<#
    foreach(var prop in allProps.Where(p => p.PropertyType.IsCollectionType()))
    {
        var varName = $"tmp{prop.Name}";
        var propTypeName = prop.PropertyType.BuildTypeName();
        var propInstTypeName = prop.PropertyType.TypeParameter(0);
#>
        <#= propTypeName #> <#= varName #> = [];
        <#= varName #>.AddRange(ctx.<#= prop.Name #>.Select(x => (<#= propInstTypeName #>)Visit(x)));
<#
    } // for all collection properties
#>
     return ctx with {
<#
    string sep = " ";
    foreach (var prop in allProps)
    {
        if(prop.PropertyType.IsCollectionType())
        {
        var varName = $"tmp{prop.Name}";
#>
        <#= sep #><#= prop.Name #> = <#= varName #>
<#
        }
        else
        {
            var propTypeName = prop.PropertyType.BuildTypeName();
#>
        <#= sep #><#= prop.Name #> = (<#= propTypeName #>)Visit((AstThing)ctx.<#= prop.Name #>)
<#
        }
        sep = ",";
    } // foreach prop

#>
        };
    }
<#
} // foreach ast
#>

}

