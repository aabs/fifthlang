namespace ast_generated;
using ast;
using System.Collections.Generic;
#nullable disable

<#
foreach (var t in concreteTypes)
{
    //Console.WriteLine($"type {t.Name}");
    var allProps = t.InitialisedProperties();

#>
public class <#= t.Name #>Builder : IBuilder<<#= t.FullName #>>
{

<#
    foreach (var prop in allProps)
    {
#>
    private <#= prop.PropertyType.BuildTypeName() #> _<#= prop.Name #>;
<#
    }
#>
    
    public <#= t.FullName #> Build()
    {
        return new <#= t.FullName #>(){
<#
    string sep = " ";
    foreach (var prop in allProps)
    {
#>
           <#= sep#> <#= prop.Name #> = this._<#= prop.Name #> // from <#= prop.DeclaringType.Name #>
<#
    sep = ",";
    }
#>
        };
    }
<#
    foreach (var prop in allProps)
    {
        //Console.WriteLine($"prop {prop.Name}");
#>
    public <#= t.Name #>Builder With<#= prop.Name #>(<#= prop.PropertyType.BuildTypeName() #> value){
        _<#= prop.Name #> = value;
        return this;
    }

<#
        if (prop.PropertyType.IsCollectionType())
        {
            var llAdjust = prop.PropertyType.IsLinkedListCollectionType() ? "Last" : "";
#>
    public <#= t.Name #>Builder AddingItemTo<#= prop.Name #>(<#= prop.PropertyType.BuildInstanceTypeName() #> value){
        _<#= prop.Name #>  ??= [];
        _<#= prop.Name #>.Add<#= llAdjust #>(value);
        return this;
    }
<#
        }  /*if (prop.IsCollection)*/
#>
<#
    } /* foreach prop */
#>
}
<# } /*for each ast*/ #>

#nullable restore
