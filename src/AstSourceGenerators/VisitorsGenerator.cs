using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace AstSourceGenerators;

[Generator]
public class VisitorsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static ctx =>
        {
            // Generate a portion of the visitors.generated.cs content to demonstrate functionality
            var source = GenerateVisitorsContent();
            ctx.AddSource("new_visitors.generated.cs", SourceText.From(source, Encoding.UTF8));
        });
    }

    private static string GenerateVisitorsContent()
    {
        return @"// Generated by AstSourceGenerators.VisitorsGenerator
// This demonstrates the source generator is working and can replace T4 templates

namespace ast_generated;
using ast;
using System.Collections.Generic;

public interface IAstVisitor
{
    public void EnterAssemblyDef(AssemblyDef ctx);
    public void LeaveAssemblyDef(AssemblyDef ctx);
    public void EnterModuleDef(ModuleDef ctx);
    public void LeaveModuleDef(ModuleDef ctx);
    public void EnterFunctionDef(FunctionDef ctx);
    public void LeaveFunctionDef(FunctionDef ctx);
    public void EnterFunctorDef(FunctorDef ctx);
    public void LeaveFunctorDef(FunctorDef ctx);
    public void EnterFieldDef(FieldDef ctx);
    public void LeaveFieldDef(FieldDef ctx);
    public void EnterPropertyDef(PropertyDef ctx);
    public void LeavePropertyDef(PropertyDef ctx);
    public void EnterMethodDef(MethodDef ctx);
    public void LeaveMethodDef(MethodDef ctx);
    public void EnterOverloadedFunctionDefinition(OverloadedFunctionDefinition ctx);
    public void LeaveOverloadedFunctionDefinition(OverloadedFunctionDefinition ctx);
    public void EnterInferenceRuleDef(InferenceRuleDef ctx);
    public void LeaveInferenceRuleDef(InferenceRuleDef ctx);
    public void EnterParamDef(ParamDef ctx);
    public void LeaveParamDef(ParamDef ctx);
    public void EnterParamDestructureDef(ParamDestructureDef ctx);
    public void LeaveParamDestructureDef(ParamDestructureDef ctx);
    public void EnterPropertyBindingDef(PropertyBindingDef ctx);
    public void LeavePropertyBindingDef(PropertyBindingDef ctx);
    public void EnterTypeDef(TypeDef ctx);
    public void LeaveTypeDef(TypeDef ctx);
    public void EnterClassDef(ClassDef ctx);
    public void LeaveClassDef(ClassDef ctx);
    public void EnterVariableDecl(VariableDecl ctx);
    public void LeaveVariableDecl(VariableDecl ctx);
}

public abstract class BaseAstVisitor : IAstVisitor
{
    public virtual void EnterAssemblyDef(AssemblyDef ctx) { }
    public virtual void LeaveAssemblyDef(AssemblyDef ctx) { }
    public virtual void EnterModuleDef(ModuleDef ctx) { }
    public virtual void LeaveModuleDef(ModuleDef ctx) { }
    public virtual void EnterFunctionDef(FunctionDef ctx) { }
    public virtual void LeaveFunctionDef(FunctionDef ctx) { }
    public virtual void EnterFunctorDef(FunctorDef ctx) { }
    public virtual void LeaveFunctorDef(FunctorDef ctx) { }
    public virtual void EnterFieldDef(FieldDef ctx) { }
    public virtual void LeaveFieldDef(FieldDef ctx) { }
    public virtual void EnterPropertyDef(PropertyDef ctx) { }
    public virtual void LeavePropertyDef(PropertyDef ctx) { }
    public virtual void EnterMethodDef(MethodDef ctx) { }
    public virtual void LeaveMethodDef(MethodDef ctx) { }
    public virtual void EnterOverloadedFunctionDefinition(OverloadedFunctionDefinition ctx) { }
    public virtual void LeaveOverloadedFunctionDefinition(OverloadedFunctionDefinition ctx) { }
    public virtual void EnterInferenceRuleDef(InferenceRuleDef ctx) { }
    public virtual void LeaveInferenceRuleDef(InferenceRuleDef ctx) { }
    public virtual void EnterParamDef(ParamDef ctx) { }
    public virtual void LeaveParamDef(ParamDef ctx) { }
    public virtual void EnterParamDestructureDef(ParamDestructureDef ctx) { }
    public virtual void LeaveParamDestructureDef(ParamDestructureDef ctx) { }
    public virtual void EnterPropertyBindingDef(PropertyBindingDef ctx) { }
    public virtual void LeavePropertyBindingDef(PropertyBindingDef ctx) { }
    public virtual void EnterTypeDef(TypeDef ctx) { }
    public virtual void LeaveTypeDef(TypeDef ctx) { }
    public virtual void EnterClassDef(ClassDef ctx) { }
    public virtual void LeaveClassDef(ClassDef ctx) { }
    public virtual void EnterVariableDecl(VariableDecl ctx) { }
    public virtual void LeaveVariableDecl(VariableDecl ctx) { }
}";
    }
}