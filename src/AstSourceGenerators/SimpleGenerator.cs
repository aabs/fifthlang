using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Text;

namespace AstSourceGenerators;

[Generator]
public class SimpleAstGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Simple approach: just generate a diagnostic file to test if the generator works
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "diagnostic.generated.cs", 
            SourceText.From("// Source generator is working!", Encoding.UTF8)));

        // Watch for changes to AstMetamodel.cs and ILMetamodel.cs
        var metamodelProvider = context.AdditionalTextsProvider
            .Where(text => text.Path.EndsWith("AstMetamodel.cs") || text.Path.EndsWith("ILMetamodel.cs"))
            .Select((text, cancellationToken) => text.GetText(cancellationToken)?.ToString() ?? string.Empty)
            .Collect();

        // Combine with compilation to get semantic information
        var combinedProvider = context.CompilationProvider.Combine(metamodelProvider);

        context.RegisterSourceOutput(combinedProvider, GenerateSources);
    }

    private static void GenerateSources(SourceProductionContext context, (Compilation, ImmutableArray<string>) data)
    {
        var (compilation, metamodelContents) = data;
        
        var sb = new StringBuilder();
        sb.AppendLine("// Generated by SimpleAstGenerator");
        sb.AppendLine($"// Compilation: {compilation.Assembly.Name}");
        sb.AppendLine($"// Metamodel files found: {metamodelContents.Length}");
        
        foreach (var content in metamodelContents)
        {
            if (!string.IsNullOrEmpty(content))
            {
                sb.AppendLine($"// Content length: {content.Length}");
                // Count the number of record types in this content
                var recordCount = content.Split(new[] { "public record" }, StringSplitOptions.None).Length - 1;
                sb.AppendLine($"// Record types found: {recordCount}");
            }
        }

        context.AddSource("ast-info.generated.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }
}