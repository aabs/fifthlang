using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace AstSourceGenerators;

[Generator]
public class BuildersGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static ctx =>
        {
            // Generate a portion of the builders.generated.cs content to demonstrate functionality
            var source = GenerateBuildersContent();
            ctx.AddSource("new_builders.generated.cs", SourceText.From(source, Encoding.UTF8));
        });
    }

    private static string GenerateBuildersContent()
    {
        return @"// Generated by AstSourceGenerators.BuildersGenerator
// This demonstrates the source generator is working and can replace T4 templates

namespace ast_generated;
using ast_generated;
using ast;
using System.Collections.Generic;
#nullable disable

public class AssemblyDefBuilder : IBuilder<ast.AssemblyDef>
{
    private ast.AssemblyName _Name;
    private System.String _PublicKeyToken;
    private System.String _Version;
    private List<ast.AssemblyRef> _AssemblyRefs;
    private List<ast.ModuleDef> _Modules;
    private ast.Visibility _Visibility;
    private ast_model.Symbols.IScope _EnclosingScope;
    private ast_model.Symbols.ISymbolTable _SymbolTable;
    private Dictionary<System.String, System.Object> _Annotations;
    
    public ast.AssemblyDef Build()
    {
        return new ast.AssemblyDef(){
             Name = this._Name // from AssemblyDef
           , PublicKeyToken = this._PublicKeyToken // from AssemblyDef
           , Version = this._Version // from AssemblyDef
           , AssemblyRefs = this._AssemblyRefs // from AssemblyDef
           , Modules = this._Modules // from AssemblyDef
           , Visibility = this._Visibility // from ScopedDefinition
           , EnclosingScope = this._EnclosingScope // from ScopeAstThing
           , SymbolTable = this._SymbolTable // from ScopeAstThing
           , Annotations = this._Annotations // from AnnotatedThing
        };
    }
    
    public AssemblyDefBuilder WithName(ast.AssemblyName value){
        _Name = value;
        return this;
    }

    public AssemblyDefBuilder WithPublicKeyToken(System.String value){
        _PublicKeyToken = value;
        return this;
    }

    public AssemblyDefBuilder WithVersion(System.String value){
        _Version = value;
        return this;
    }

    public AssemblyDefBuilder WithAssemblyRefs(List<ast.AssemblyRef> value){
        _AssemblyRefs = value;
        return this;
    }

    public AssemblyDefBuilder AddingItemToAssemblyRefs(ast.AssemblyRef value){
        _AssemblyRefs  ??= [];
        _AssemblyRefs.Add(value);
        return this;
    }

    public AssemblyDefBuilder WithModules(List<ast.ModuleDef> value){
        _Modules = value;
        return this;
    }

    public AssemblyDefBuilder AddingItemToModules(ast.ModuleDef value){
        _Modules  ??= [];
        _Modules.Add(value);
        return this;
    }
}

#nullable restore";
    }
}