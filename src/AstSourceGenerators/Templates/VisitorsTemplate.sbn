{{~ # Visitors Generator Template - Replaces AstVisitors.tt ~}}
namespace {{ namespace }}_generated;
using {{ namespace }};
using System.Collections.Generic;

public interface IAstVisitor
{
{{~ for type in concrete_types ~}}
    public void Enter{{ type.name }}({{ type.name }} ctx);
    public void Leave{{ type.name }}({{ type.name }} ctx);
{{~ end ~}}
}

public partial class BaseAstVisitor : IAstVisitor
{
{{~ for type in concrete_types ~}}
    public virtual void Enter{{ type.name }}({{ type.name }} ctx){}
    public virtual void Leave{{ type.name }}({{ type.name }} ctx){}
{{~ end ~}}
}


public interface IAstRecursiveDescentVisitor
{
    public AstThing Visit(AstThing ctx);
{{~ for type in concrete_types ~}}
    public {{ type.name }} Visit{{ type.name }}({{ type.name }} ctx);
{{~ end ~}}
}

public class DefaultRecursiveDescentVisitor : IAstRecursiveDescentVisitor
{
    public virtual AstThing Visit(AstThing ctx){
        if(ctx == null) return ctx;
        return ctx switch
        {
{{~ for type in concrete_types ~}}
             {{ type.name }} node => Visit{{ type.name }}(node),
{{~ end ~}}

            { } node => null,
        };
    }

{{~ for type in concrete_types ~}}
{{~ visitable_props = type.properties | array.where @(do; ret $0.is_visitable; end) ~}}
    public virtual {{ type.name }} Visit{{ type.name }}({{ type.name }} ctx)
    {
{{~ for prop in visitable_props | array.where @(do; ret $0.is_collection; end) ~}}
{{~ var_name = "tmp" + prop.name ~}}
        {{ prop.type_name }} {{ var_name }} = [];
        {{ var_name }}.AddRange(ctx.{{ prop.name }}.Select(x => ({{ prop.collection_element_type }})Visit(x)));
{{~ end ~}}
     return ctx with {
{{~ sep = " " ~}}
{{~ for prop in visitable_props ~}}
{{~ if prop.is_collection ~}}
{{~ var_name = "tmp" + prop.name ~}}
        {{ sep }}{{ prop.name }} = {{ var_name }}
{{~ else ~}}
        {{ sep }}{{ prop.name }} = ({{ prop.type_name }})Visit((AstThing)ctx.{{ prop.name }})
{{~ end ~}}
{{~ sep = "," ~}}
{{~ end ~}}
        };
    }
{{~ end ~}}

}