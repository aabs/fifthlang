using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace AstSourceGenerators;

[Generator]
public class TypeInferenceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static ctx =>
        {
            // Generate a portion of the typeinference.generated.cs content to demonstrate functionality
            var source = GenerateTypeInferenceContent();
            ctx.AddSource("new_typeinference.generated.cs", SourceText.From(source, Encoding.UTF8));
        });
    }

    private static string GenerateTypeInferenceContent()
    {
        return @"// Generated by AstSourceGenerators.TypeInferenceGenerator
// This demonstrates the source generator is working and can replace T4 templates

namespace ast_generated;
using ast;
using ast_model.Symbols;
using ast_model.TypeSystem;

public interface ITypeChecker
{
    public FifthType Infer(ScopeAstThing scope, AssemblyDef node);
    public FifthType Infer(ScopeAstThing scope, ModuleDef node);
    public FifthType Infer(ScopeAstThing scope, FunctionDef node);
    public FifthType Infer(ScopeAstThing scope, FunctorDef node);
    public FifthType Infer(ScopeAstThing scope, FieldDef node);
    public FifthType Infer(ScopeAstThing scope, PropertyDef node);
    public FifthType Infer(ScopeAstThing scope, MethodDef node);
    public FifthType Infer(ScopeAstThing scope, OverloadedFunctionDefinition node);
    public FifthType Infer(ScopeAstThing scope, InferenceRuleDef node);
    public FifthType Infer(ScopeAstThing scope, ParamDef node);
    public FifthType Infer(ScopeAstThing scope, ParamDestructureDef node);
    public FifthType Infer(ScopeAstThing scope, PropertyBindingDef node);
    public FifthType Infer(ScopeAstThing scope, TypeDef node);
    public FifthType Infer(ScopeAstThing scope, ClassDef node);
    public FifthType Infer(ScopeAstThing scope, VariableDecl node);
    public FifthType Infer(ScopeAstThing scope, AssemblyRef node);
    public FifthType Infer(ScopeAstThing scope, MemberRef node);
    public FifthType Infer(ScopeAstThing scope, PropertyRef node);
    public FifthType Infer(ScopeAstThing scope, TypeRef node);
    public FifthType Infer(ScopeAstThing scope, VarRef node);
}

public class TypeChecker : ITypeChecker
{
    public FifthType Infer(ScopeAstThing scope, AssemblyDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, ModuleDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, FunctionDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, FunctorDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, FieldDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, PropertyDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, MethodDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, OverloadedFunctionDefinition node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, InferenceRuleDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, ParamDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, ParamDestructureDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, PropertyBindingDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, TypeDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, ClassDef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, VariableDecl node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, AssemblyRef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, MemberRef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, PropertyRef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, TypeRef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }

    public FifthType Infer(ScopeAstThing scope, VarRef node)
    {
        // Default implementation - would be generated based on AST type analysis
        return FifthType.Unknown;
    }
}";
    }
}