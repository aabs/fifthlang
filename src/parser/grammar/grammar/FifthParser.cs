//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FifthParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class FifthParser : FifthParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, BREAK=3, CASE=4, CLASS=5, CONST=6, CONTINUE=7, DEFAULT=8, 
		DEFER=9, ELSE=10, EXTENDS=11, FALLTHROUGH=12, FOR=13, FUNC=14, GO=15, 
		GOTO=16, IF=17, IMPORT=18, IN=19, INTERFACE=20, MAP=21, NEW=22, PACKAGE=23, 
		RANGE=24, RETURN=25, SELECT=26, STRUCT=27, SWITCH=28, TYPE=29, USE=30, 
		VAR=31, WHILE=32, WITH=33, TRUE=34, FALSE=35, NIL_LIT=36, IDENTIFIER=37, 
		L_PAREN=38, R_PAREN=39, L_CURLY=40, R_CURLY=41, L_GRAPH=42, R_GRAPH=43, 
		L_BRACKET=44, R_BRACKET=45, ASSIGN=46, COMMA=47, SEMI=48, COLON=49, DOT=50, 
		PLUS_PLUS=51, MINUS_MINUS=52, STAR_STAR=53, DECLARE_ASSIGN=54, ELLIPSIS=55, 
		GEN=56, UNDERSCORE=57, LOGICAL_NOT=58, LOGICAL_OR=59, LOGICAL_AND=60, 
		LOGICAL_NAND=61, LOGICAL_NOR=62, LOGICAL_XOR=63, EQUALS=64, NOT_EQUALS=65, 
		LESS=66, LESS_OR_EQUALS=67, GREATER=68, GREATER_OR_EQUALS=69, OR=70, DIV=71, 
		MOD=72, LSHIFT=73, RSHIFT=74, POW=75, PLUS=76, MINUS=77, STAR=78, AMPERSAND=79, 
		SUCH_THAT=80, CONCAT=81, SUF_SHORT=82, SUF_DECIMAL=83, SUF_DOUBLE=84, 
		SUF_LONG=85, DECIMAL_LIT=86, BINARY_LIT=87, OCTAL_LIT=88, HEX_LIT=89, 
		REAL_LITERAL=90, FLOAT_LIT=91, DECIMAL_FLOAT_LIT=92, HEX_FLOAT_LIT=93, 
		IMAGINARY_LIT=94, RUNE_LIT=95, BYTE_VALUE=96, OCTAL_BYTE_VALUE=97, HEX_BYTE_VALUE=98, 
		LITTLE_U_VALUE=99, BIG_U_VALUE=100, RAW_STRING_LIT=101, INTERPRETED_STRING_LIT=102, 
		INTERPOLATED_STRING_LIT=103, WS=104, COMMENT=105, TERMINATOR=106, LINE_COMMENT=107, 
		WS_NLSEMI=108, COMMENT_NLSEMI=109, LINE_COMMENT_NLSEMI=110, EOS=111;
	public const int
		RULE_fifth = 0, RULE_module_import = 1, RULE_module_name = 2, RULE_packagename = 3, 
		RULE_alias = 4, RULE_function_declaration = 5, RULE_function_body = 6, 
		RULE_function_name = 7, RULE_variable_constraint = 8, RULE_paramdecl = 9, 
		RULE_destructuring_decl = 10, RULE_destructure_binding = 11, RULE_class_definition = 12, 
		RULE_property_declaration = 13, RULE_type_name = 14, RULE_absoluteIri = 15, 
		RULE_block = 16, RULE_declaration = 17, RULE_statement = 18, RULE_assignment_statement = 19, 
		RULE_expression_statement = 20, RULE_if_statement = 21, RULE_return_statement = 22, 
		RULE_while_statement = 23, RULE_with_statement = 24, RULE_var_decl = 25, 
		RULE_var_name = 26, RULE_list = 27, RULE_list_body = 28, RULE_list_literal = 29, 
		RULE_list_comprehension = 30, RULE_list_type_signature = 31, RULE_array_type_signature = 32, 
		RULE_expressionList = 33, RULE_expression = 34, RULE_function_call_expression = 35, 
		RULE_operand = 36, RULE_object_instantiation_expression = 37, RULE_initialiser_property_assignment = 38, 
		RULE_index = 39, RULE_slice_ = 40, RULE_literal = 41, RULE_string_ = 42, 
		RULE_boolean = 43, RULE_integer = 44, RULE_operandName = 45, RULE_qualifiedIdent = 46;
	public static readonly string[] ruleNames = {
		"fifth", "module_import", "module_name", "packagename", "alias", "function_declaration", 
		"function_body", "function_name", "variable_constraint", "paramdecl", 
		"destructuring_decl", "destructure_binding", "class_definition", "property_declaration", 
		"type_name", "absoluteIri", "block", "declaration", "statement", "assignment_statement", 
		"expression_statement", "if_statement", "return_statement", "while_statement", 
		"with_statement", "var_decl", "var_name", "list", "list_body", "list_literal", 
		"list_comprehension", "list_type_signature", "array_type_signature", "expressionList", 
		"expression", "function_call_expression", "operand", "object_instantiation_expression", 
		"initialiser_property_assignment", "index", "slice_", "literal", "string_", 
		"boolean", "integer", "operandName", "qualifiedIdent"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'break'", "'case'", "'class'", "'const'", "'continue'", 
		"'default'", "'defer'", "'else'", "'extends'", "'fallthrough'", "'for'", 
		"'func'", "'go'", "'goto'", "'if'", "'import'", "'in'", "'interface'", 
		"'map'", "'new'", "'package'", "'range'", "'return'", "'select'", "'struct'", 
		"'switch'", "'type'", "'use'", "'var'", "'while'", "'with'", "'true'", 
		"'false'", "'null'", null, "'('", "')'", "'{'", "'}'", "'<{'", "'}>'", 
		"'['", "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", "'**'", 
		"':='", "'...'", "'<-'", "'_'", "'!'", "'||'", "'&&'", "'!&'", "'!|'", 
		"'~'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", 
		"'<<'", "'>>'", "'^'", "'+'", "'-'", "'*'", "'&'", "'#'", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "BREAK", "CASE", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
		"DEFER", "ELSE", "EXTENDS", "FALLTHROUGH", "FOR", "FUNC", "GO", "GOTO", 
		"IF", "IMPORT", "IN", "INTERFACE", "MAP", "NEW", "PACKAGE", "RANGE", "RETURN", 
		"SELECT", "STRUCT", "SWITCH", "TYPE", "USE", "VAR", "WHILE", "WITH", "TRUE", 
		"FALSE", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", 
		"L_GRAPH", "R_GRAPH", "L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", 
		"COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS", "STAR_STAR", "DECLARE_ASSIGN", 
		"ELLIPSIS", "GEN", "UNDERSCORE", "LOGICAL_NOT", "LOGICAL_OR", "LOGICAL_AND", 
		"LOGICAL_NAND", "LOGICAL_NOR", "LOGICAL_XOR", "EQUALS", "NOT_EQUALS", 
		"LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", "OR", "DIV", 
		"MOD", "LSHIFT", "RSHIFT", "POW", "PLUS", "MINUS", "STAR", "AMPERSAND", 
		"SUCH_THAT", "CONCAT", "SUF_SHORT", "SUF_DECIMAL", "SUF_DOUBLE", "SUF_LONG", 
		"DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", "REAL_LITERAL", "FLOAT_LIT", 
		"DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", 
		"OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", 
		"RAW_STRING_LIT", "INTERPRETED_STRING_LIT", "INTERPOLATED_STRING_LIT", 
		"WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", "COMMENT_NLSEMI", 
		"LINE_COMMENT_NLSEMI", "EOS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FifthParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FifthContext : ParserRuleContext {
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Class_definitionContext _class_definition;
		public IList<Class_definitionContext> _classes = new List<Class_definitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext[] class_definition() {
			return GetRuleContexts<Class_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext class_definition(int i) {
			return GetRuleContext<Class_definitionContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFifth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 0, RULE_fifth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 94;
				module_import();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 100;
				alias();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CLASS || _la==IDENTIFIER) {
				{
				State = 108;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 106;
					_localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case CLASS:
					{
					State = 107;
					_localctx._class_definition = class_definition();
					_localctx._classes.Add(_localctx._class_definition);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext[] module_name() {
			return GetRuleContexts<Module_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name(int i) {
			return GetRuleContext<Module_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 2, RULE_module_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(USE);
			State = 114;
			module_name();
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 115;
				Match(COMMA);
				State = 116;
				module_name();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 6, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public PackagenameContext name;
		public AbsoluteIriContext uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbsoluteIriContext absoluteIri() {
			return GetRuleContext<AbsoluteIriContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(ALIAS);
			State = 129;
			_localctx.name = packagename();
			State = 130;
			Match(AS);
			State = 131;
			_localctx.uri = absoluteIri();
			State = 132;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext name;
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _args = new List<ParamdeclContext>();
		public Type_nameContext result_type;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_localctx.name = function_name();
			State = 135;
			Match(L_PAREN);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 136;
				_localctx._paramdecl = paramdecl();
				_localctx._args.Add(_localctx._paramdecl);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 137;
					Match(COMMA);
					State = 138;
					_localctx._paramdecl = paramdecl();
					_localctx._args.Add(_localctx._paramdecl);
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 146;
			Match(R_PAREN);
			State = 147;
			Match(COLON);
			State = 148;
			_localctx.result_type = type_name();
			State = 149;
			_localctx.body = function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_constraintContext : ParserRuleContext {
		public ExpressionContext constraint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FifthParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVariable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVariable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_constraintContext variable_constraint() {
		Variable_constraintContext _localctx = new Variable_constraintContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(OR);
			State = 156;
			_localctx.constraint = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamdeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public ParamdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramdecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterParamdecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitParamdecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamdeclContext paramdecl() {
		ParamdeclContext _localctx = new ParamdeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_paramdecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			var_name();
			State = 159;
			Match(COLON);
			State = 160;
			type_name();
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				{
				State = 161;
				variable_constraint();
				}
				break;
			case L_CURLY:
				{
				State = 162;
				destructuring_decl();
				}
				break;
			case R_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructuring_declContext : ParserRuleContext {
		public Destructure_bindingContext _destructure_binding;
		public IList<Destructure_bindingContext> _bindings = new List<Destructure_bindingContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Destructure_bindingContext[] destructure_binding() {
			return GetRuleContexts<Destructure_bindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructure_bindingContext destructure_binding(int i) {
			return GetRuleContext<Destructure_bindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Destructuring_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructuring_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDestructuring_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDestructuring_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructuring_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructuring_declContext destructuring_decl() {
		Destructuring_declContext _localctx = new Destructuring_declContext(Context, State);
		EnterRule(_localctx, 20, RULE_destructuring_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(L_CURLY);
			State = 166;
			_localctx._destructure_binding = destructure_binding();
			_localctx._bindings.Add(_localctx._destructure_binding);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 167;
				Match(COMMA);
				State = 168;
				_localctx._destructure_binding = destructure_binding();
				_localctx._bindings.Add(_localctx._destructure_binding);
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructure_bindingContext : ParserRuleContext {
		public IToken name;
		public IToken propname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public Destructure_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructure_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDestructure_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDestructure_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructure_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructure_bindingContext destructure_binding() {
		Destructure_bindingContext _localctx = new Destructure_bindingContext(Context, State);
		EnterRule(_localctx, 22, RULE_destructure_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_localctx.name = Match(IDENTIFIER);
			State = 177;
			Match(COLON);
			State = 178;
			_localctx.propname = Match(IDENTIFIER);
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				{
				State = 179;
				variable_constraint();
				}
				break;
			case L_CURLY:
				{
				State = 180;
				destructuring_decl();
				}
				break;
			case R_CURLY:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public IToken name;
		public Type_nameContext superClass;
		public PackagenameContext aliasScope;
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Property_declarationContext _property_declaration;
		public IList<Property_declarationContext> _properties = new List<Property_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FifthParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(FifthParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext[] property_declaration() {
			return GetRuleContexts<Property_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext property_declaration(int i) {
			return GetRuleContext<Property_declarationContext>(i);
		}
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(CLASS);
			State = 184;
			_localctx.name = Match(IDENTIFIER);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 185;
				Match(EXTENDS);
				State = 186;
				_localctx.superClass = type_name();
				}
			}

			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 189;
				Match(IN);
				State = 190;
				_localctx.aliasScope = packagename();
				}
			}

			State = 193;
			Match(L_CURLY);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				State = 196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 194;
					_localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case 2:
					{
					State = 195;
					_localctx._property_declaration = property_declaration();
					_localctx._properties.Add(_localctx._property_declaration);
					}
					break;
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_property_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_localctx.name = Match(IDENTIFIER);
			State = 204;
			Match(COLON);
			State = 205;
			_localctx.type = Match(IDENTIFIER);
			State = 206;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsoluteIriContext : ParserRuleContext {
		public IToken iri_scheme;
		public IToken _IDENTIFIER;
		public IList<IToken> _iri_domain = new List<IToken>();
		public IList<IToken> _iri_segment = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(FifthParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(FifthParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(FifthParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(FifthParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCH_THAT() { return GetToken(FifthParser.SUCH_THAT, 0); }
		public AbsoluteIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absoluteIri; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAbsoluteIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAbsoluteIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsoluteIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsoluteIriContext absoluteIri() {
		AbsoluteIriContext _localctx = new AbsoluteIriContext(Context, State);
		EnterRule(_localctx, 30, RULE_absoluteIri);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_localctx.iri_scheme = Match(IDENTIFIER);
			State = 211;
			Match(COLON);
			State = 212;
			Match(DIV);
			State = 213;
			Match(DIV);
			State = 214;
			_localctx._IDENTIFIER = Match(IDENTIFIER);
			_localctx._iri_domain.Add(_localctx._IDENTIFIER);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 215;
				Match(DOT);
				State = 216;
				_localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._iri_domain.Add(_localctx._IDENTIFIER);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 226;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 222;
					Match(DIV);
					State = 223;
					_localctx._IDENTIFIER = Match(IDENTIFIER);
					_localctx._iri_segment.Add(_localctx._IDENTIFIER);
					}
					} 
				}
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIV) {
				{
				State = 229;
				Match(DIV);
				}
			}

			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUCH_THAT) {
				{
				State = 232;
				Match(SUCH_THAT);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 233;
					Match(IDENTIFIER);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(L_CURLY);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295286487765876736L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 235699203L) != 0)) {
				{
				{
				State = 239;
				statement();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 245;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Var_declContext decl;
		public ExpressionContext init;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_localctx.decl = var_decl();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 248;
				Match(ASSIGN);
				State = 249;
				_localctx.init = expression(0);
				}
			}

			State = 252;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_statementContext with_statement() {
			return GetRuleContext<With_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256;
				while_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 257;
				with_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 258;
				assignment_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 259;
				return_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 260;
				expression_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 261;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public ExpressionContext lvalue;
		public ExpressionContext rvalue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAssignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAssignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx.lvalue = expression(0);
			State = 265;
			Match(ASSIGN);
			State = 266;
			_localctx.rvalue = expression(0);
			State = 267;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295003900358950912L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 235699203L) != 0)) {
				{
				State = 269;
				expression(0);
				}
			}

			State = 272;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext ifpart;
		public StatementContext elsepart;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(IF);
			State = 275;
			Match(L_PAREN);
			State = 276;
			_localctx.condition = expression(0);
			State = 277;
			Match(R_PAREN);
			State = 278;
			_localctx.ifpart = statement();
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 279;
				Match(ELSE);
				State = 280;
				_localctx.elsepart = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(FifthParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(RETURN);
			State = 284;
			expression(0);
			State = 285;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext looppart;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(FifthParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(WHILE);
			State = 288;
			Match(L_PAREN);
			State = 289;
			_localctx.condition = expression(0);
			State = 290;
			Match(R_PAREN);
			State = 291;
			_localctx.looppart = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public With_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterWith_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitWith_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_statementContext with_statement() {
		With_statementContext _localctx = new With_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_with_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(WITH);
			State = 294;
			expression(0);
			State = 295;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_type_signatureContext list_type_signature() {
			return GetRuleContext<List_type_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_signatureContext array_type_signature() {
			return GetRuleContext<Array_type_signatureContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 50, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			var_name();
			State = 298;
			Match(COLON);
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 299;
				type_name();
				}
				break;
			case 2:
				{
				State = 300;
				list_type_signature();
				}
				break;
			case 3:
				{
				State = 301;
				array_type_signature();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 52, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_bodyContext list_body() {
			return GetRuleContext<List_bodyContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 54, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(L_BRACKET);
			State = 307;
			_localctx.body = list_body();
			State = 308;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_comprehensionContext list_comprehension() {
			return GetRuleContext<List_comprehensionContext>(0);
		}
		public List_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_bodyContext list_body() {
		List_bodyContext _localctx = new List_bodyContext(Context, State);
		EnterRule(_localctx, 56, RULE_list_body);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310;
				list_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311;
				list_comprehension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 58, RULE_list_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_comprehensionContext : ParserRuleContext {
		public Var_nameContext varname;
		public ExpressionContext source;
		public ExpressionContext constraint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCH_THAT() { return GetToken(FifthParser.SUCH_THAT, 0); }
		public List_comprehensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_comprehension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_comprehension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_comprehension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_comprehension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_comprehensionContext list_comprehension() {
		List_comprehensionContext _localctx = new List_comprehensionContext(Context, State);
		EnterRule(_localctx, 60, RULE_list_comprehension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			_localctx.varname = var_name();
			State = 317;
			Match(IN);
			State = 318;
			_localctx.source = expression(0);
			{
			State = 319;
			Match(SUCH_THAT);
			State = 320;
			_localctx.constraint = expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_type_signatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		public List_type_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_type_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_type_signatureContext list_type_signature() {
		List_type_signatureContext _localctx = new List_type_signatureContext(Context, State);
		EnterRule(_localctx, 62, RULE_list_type_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(L_BRACKET);
			State = 323;
			type_name();
			State = 324;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_signatureContext : ParserRuleContext {
		public OperandContext size;
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Array_type_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterArray_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitArray_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_signatureContext array_type_signature() {
		Array_type_signatureContext _localctx = new Array_type_signatureContext(Context, State);
		EnterRule(_localctx, 64, RULE_array_type_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			type_name();
			State = 327;
			Match(L_BRACKET);
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18124766183424L) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 230175L) != 0)) {
				{
				State = 328;
				_localctx.size = operand();
				}
			}

			State = 331;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 66, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			_localctx._expression = expression(0);
			_localctx._expressions.Add(_localctx._expression);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 334;
				Match(COMMA);
				State = 335;
				_localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Exp_mulContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken mul_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(FifthParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(FifthParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(FifthParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(FifthParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(FifthParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(FifthParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR_STAR() { return GetToken(FifthParser.STAR_STAR, 0); }
		public Exp_mulContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_mul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_andContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(FifthParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_andContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_and(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_relContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken rel_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(FifthParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(FifthParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(FifthParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(FifthParser.GREATER_OR_EQUALS, 0); }
		public Exp_relContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_rel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_rel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_rel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_operandContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Exp_operandContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_operand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_unary_postfixContext : ExpressionContext {
		public IToken unary_op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(FifthParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(FifthParser.MINUS_MINUS, 0); }
		public Exp_unary_postfixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_unary_postfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_unary_postfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_unary_postfix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_unaryContext : ExpressionContext {
		public IToken unary_op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_NOT() { return GetToken(FifthParser.LOGICAL_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(FifthParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(FifthParser.MINUS_MINUS, 0); }
		public Exp_unaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_unary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_expContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(FifthParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_expContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_funccallContext : ExpressionContext {
		public IToken funcname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Exp_funccallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_funccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_funccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_funccall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_member_accessContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FifthParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_member_accessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_member_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_member_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_member_access(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_orContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(FifthParser.LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_orContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_addContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken add_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FifthParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_XOR() { return GetToken(FifthParser.LOGICAL_XOR, 0); }
		public Exp_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_indexContext : ExpressionContext {
		public ExpressionContext lhs;
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Exp_indexContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				_localctx = new Exp_funccallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 342;
				((Exp_funccallContext)_localctx).funcname = Match(IDENTIFIER);
				State = 343;
				Match(L_PAREN);
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295003900358950912L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 235699203L) != 0)) {
					{
					State = 344;
					expressionList();
					}
				}

				State = 347;
				Match(R_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new Exp_unaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 348;
				((Exp_unaryContext)_localctx).unary_op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & 100663427L) != 0)) ) {
					((Exp_unaryContext)_localctx).unary_op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 349;
				expression(3);
				}
				break;
			case 3:
				{
				_localctx = new Exp_operandContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 350;
				operand();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 380;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 378;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new Exp_member_accessContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_member_accessContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 353;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 354;
						Match(DOT);
						State = 355;
						((Exp_member_accessContext)_localctx).rhs = expression(13);
						}
						break;
					case 2:
						{
						_localctx = new Exp_expContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_expContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 356;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 357;
						Match(POW);
						State = 358;
						((Exp_expContext)_localctx).rhs = expression(10);
						}
						break;
					case 3:
						{
						_localctx = new Exp_mulContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_mulContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 359;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 360;
						((Exp_mulContext)_localctx).mul_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 104595457L) != 0)) ) {
							((Exp_mulContext)_localctx).mul_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 361;
						((Exp_mulContext)_localctx).rhs = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new Exp_addContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_addContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 362;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 363;
						((Exp_addContext)_localctx).add_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 24705L) != 0)) ) {
							((Exp_addContext)_localctx).add_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 364;
						((Exp_addContext)_localctx).rhs = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new Exp_relContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_relContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 365;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 366;
						((Exp_relContext)_localctx).rel_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) ) {
							((Exp_relContext)_localctx).rel_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 367;
						((Exp_relContext)_localctx).rhs = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new Exp_andContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_andContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 368;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 369;
						Match(LOGICAL_AND);
						State = 370;
						((Exp_andContext)_localctx).rhs = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new Exp_orContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_orContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 371;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 372;
						Match(LOGICAL_OR);
						State = 373;
						((Exp_orContext)_localctx).rhs = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new Exp_indexContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_indexContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 374;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 375;
						index();
						}
						break;
					case 9:
						{
						_localctx = new Exp_unary_postfixContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 376;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 377;
						((Exp_unary_postfixContext)_localctx).unary_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
							((Exp_unary_postfixContext)_localctx).unary_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_expressionContext : ParserRuleContext {
		public Function_nameContext un;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Function_call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_expressionContext function_call_expression() {
		Function_call_expressionContext _localctx = new Function_call_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_function_call_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_localctx.un = function_name();
			State = 384;
			Match(L_PAREN);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295003900358950912L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 235699203L) != 0)) {
				{
				State = 385;
				expressionList();
				}
			}

			State = 388;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_instantiation_expressionContext object_instantiation_expression() {
			return GetRuleContext<Object_instantiation_expressionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 72, RULE_operand);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NIL_LIT:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case REAL_LITERAL:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
			case INTERPOLATED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				literal();
				}
				break;
			case L_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				list();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				var_name();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 393;
				Match(L_PAREN);
				State = 394;
				expression(0);
				State = 395;
				Match(R_PAREN);
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 5);
				{
				State = 397;
				object_instantiation_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_instantiation_expressionContext : ParserRuleContext {
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _args = new List<ParamdeclContext>();
		public Initialiser_property_assignmentContext _initialiser_property_assignment;
		public IList<Initialiser_property_assignmentContext> _properties = new List<Initialiser_property_assignmentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initialiser_property_assignmentContext[] initialiser_property_assignment() {
			return GetRuleContexts<Initialiser_property_assignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initialiser_property_assignmentContext initialiser_property_assignment(int i) {
			return GetRuleContext<Initialiser_property_assignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		public Object_instantiation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_instantiation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterObject_instantiation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitObject_instantiation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_instantiation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_instantiation_expressionContext object_instantiation_expression() {
		Object_instantiation_expressionContext _localctx = new Object_instantiation_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_object_instantiation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(NEW);
			State = 401;
			type_name();
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 402;
				Match(L_PAREN);
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 403;
					_localctx._paramdecl = paramdecl();
					_localctx._args.Add(_localctx._paramdecl);
					State = 408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 404;
						Match(COMMA);
						State = 405;
						_localctx._paramdecl = paramdecl();
						_localctx._args.Add(_localctx._paramdecl);
						}
						}
						State = 410;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 413;
				Match(R_PAREN);
				}
				break;
			}
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 416;
				Match(L_CURLY);
				State = 417;
				_localctx._initialiser_property_assignment = initialiser_property_assignment();
				_localctx._properties.Add(_localctx._initialiser_property_assignment);
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 418;
					Match(COMMA);
					State = 419;
					_localctx._initialiser_property_assignment = initialiser_property_assignment();
					_localctx._properties.Add(_localctx._initialiser_property_assignment);
					}
					}
					State = 424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 425;
				Match(R_CURLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initialiser_property_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Initialiser_property_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialiser_property_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterInitialiser_property_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitInitialiser_property_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialiser_property_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initialiser_property_assignmentContext initialiser_property_assignment() {
		Initialiser_property_assignmentContext _localctx = new Initialiser_property_assignmentContext(Context, State);
		EnterRule(_localctx, 76, RULE_initialiser_property_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			var_name();
			State = 430;
			Match(ASSIGN);
			State = 431;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 78, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(L_BRACKET);
			State = 434;
			expression(0);
			State = 435;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FifthParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FifthParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Slice_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slice_Context slice_() {
		Slice_Context _localctx = new Slice_Context(Context, State);
		EnterRule(_localctx, 80, RULE_slice_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(L_BRACKET);
			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295003900358950912L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 235699203L) != 0)) {
					{
					State = 438;
					expression(0);
					}
				}

				State = 441;
				Match(COLON);
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295003900358950912L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 235699203L) != 0)) {
					{
					State = 442;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295003900358950912L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 235699203L) != 0)) {
					{
					State = 445;
					expression(0);
					}
				}

				State = 448;
				Match(COLON);
				State = 449;
				expression(0);
				State = 450;
				Match(COLON);
				State = 451;
				expression(0);
				}
				break;
			}
			State = 455;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Lit_stringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public Lit_stringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_nilContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT() { return GetToken(FifthParser.NIL_LIT, 0); }
		public Lit_nilContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_nil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_intContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Lit_intContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_boolContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Lit_boolContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_floatContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(FifthParser.REAL_LITERAL, 0); }
		public Lit_floatContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_literal);
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
				_localctx = new Lit_nilContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 457;
				Match(NIL_LIT);
				}
				break;
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
				_localctx = new Lit_intContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				integer();
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new Lit_boolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 459;
				boolean();
				}
				break;
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
			case INTERPOLATED_STRING_LIT:
				_localctx = new Lit_stringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 460;
				string_();
				}
				break;
			case REAL_LITERAL:
				_localctx = new Lit_floatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 461;
				Match(REAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_Context : ParserRuleContext {
		public String_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_; } }
	 
		public String_Context() { }
		public virtual void CopyFrom(String_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Str_rawContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LIT() { return GetToken(FifthParser.RAW_STRING_LIT, 0); }
		public Str_rawContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_raw(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Str_plainContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPRETED_STRING_LIT() { return GetToken(FifthParser.INTERPRETED_STRING_LIT, 0); }
		public Str_plainContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_plain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_plain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_plain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Str_interpolatedContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_STRING_LIT() { return GetToken(FifthParser.INTERPOLATED_STRING_LIT, 0); }
		public Str_interpolatedContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_interpolated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_interpolated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_interpolated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_Context string_() {
		String_Context _localctx = new String_Context(Context, State);
		EnterRule(_localctx, 84, RULE_string_);
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPRETED_STRING_LIT:
				_localctx = new Str_plainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 464;
				Match(INTERPRETED_STRING_LIT);
				}
				break;
			case INTERPOLATED_STRING_LIT:
				_localctx = new Str_interpolatedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 465;
				Match(INTERPOLATED_STRING_LIT);
				}
				break;
			case RAW_STRING_LIT:
				_localctx = new Str_rawContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 466;
				Match(RAW_STRING_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(FifthParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(FifthParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 86, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	 
		public IntegerContext() { }
		public virtual void CopyFrom(IntegerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Num_binaryContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LIT() { return GetToken(FifthParser.BINARY_LIT, 0); }
		public Num_binaryContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_binary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_hexContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(FifthParser.HEX_LIT, 0); }
		public Num_hexContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_hex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_runeContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(FifthParser.RUNE_LIT, 0); }
		public Num_runeContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_rune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_rune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_rune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_imaginaryContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGINARY_LIT() { return GetToken(FifthParser.IMAGINARY_LIT, 0); }
		public Num_imaginaryContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_imaginary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_imaginary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_imaginary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_decimalContext : IntegerContext {
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LIT() { return GetToken(FifthParser.DECIMAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUF_SHORT() { return GetToken(FifthParser.SUF_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUF_LONG() { return GetToken(FifthParser.SUF_LONG, 0); }
		public Num_decimalContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_decimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_octalContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LIT() { return GetToken(FifthParser.OCTAL_LIT, 0); }
		public Num_octalContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_octal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_octal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_octal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 88, RULE_integer);
		int _la;
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LIT:
				_localctx = new Num_decimalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				Match(DECIMAL_LIT);
				State = 473;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 472;
					((Num_decimalContext)_localctx).suffix = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==SUF_SHORT || _la==SUF_LONG) ) {
						((Num_decimalContext)_localctx).suffix = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BINARY_LIT:
				_localctx = new Num_binaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				Match(BINARY_LIT);
				}
				break;
			case OCTAL_LIT:
				_localctx = new Num_octalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 476;
				Match(OCTAL_LIT);
				}
				break;
			case HEX_LIT:
				_localctx = new Num_hexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 477;
				Match(HEX_LIT);
				}
				break;
			case IMAGINARY_LIT:
				_localctx = new Num_imaginaryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 478;
				Match(IMAGINARY_LIT);
				}
				break;
			case RUNE_LIT:
				_localctx = new Num_runeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 479;
				Match(RUNE_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_operandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FifthParser.DOT, 0); }
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 92, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(IDENTIFIER);
			State = 485;
			Match(DOT);
			State = 486;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 34: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,111,489,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,5,0,96,8,0,10,0,12,0,99,9,
		0,1,0,5,0,102,8,0,10,0,12,0,105,9,0,1,0,1,0,5,0,109,8,0,10,0,12,0,112,
		9,0,1,1,1,1,1,1,1,1,5,1,118,8,1,10,1,12,1,121,9,1,1,1,1,1,1,2,1,2,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,140,8,5,10,5,12,5,
		143,9,5,3,5,145,8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,
		9,1,9,1,9,1,9,1,9,3,9,164,8,9,1,10,1,10,1,10,1,10,5,10,170,8,10,10,10,
		12,10,173,9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,182,8,11,1,12,1,
		12,1,12,1,12,3,12,188,8,12,1,12,1,12,3,12,192,8,12,1,12,1,12,1,12,5,12,
		197,8,12,10,12,12,12,200,9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,218,8,15,10,15,12,15,221,
		9,15,1,15,1,15,5,15,225,8,15,10,15,12,15,228,9,15,1,15,3,15,231,8,15,1,
		15,1,15,3,15,235,8,15,3,15,237,8,15,1,16,1,16,5,16,241,8,16,10,16,12,16,
		244,9,16,1,16,1,16,1,17,1,17,1,17,3,17,251,8,17,1,17,1,17,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,3,18,263,8,18,1,19,1,19,1,19,1,19,1,19,1,20,
		3,20,271,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,282,8,
		21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,25,3,25,303,8,25,1,26,1,26,1,27,1,27,1,27,1,27,
		1,28,1,28,3,28,313,8,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
		31,1,31,1,31,1,32,1,32,1,32,3,32,330,8,32,1,32,1,32,1,33,1,33,1,33,5,33,
		337,8,33,10,33,12,33,340,9,33,1,34,1,34,1,34,1,34,3,34,346,8,34,1,34,1,
		34,1,34,1,34,3,34,352,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,5,34,379,8,34,10,34,12,34,382,9,34,1,35,1,35,1,35,3,35,387,8,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,399,8,36,1,37,
		1,37,1,37,1,37,1,37,1,37,5,37,407,8,37,10,37,12,37,410,9,37,3,37,412,8,
		37,1,37,3,37,415,8,37,1,37,1,37,1,37,1,37,5,37,421,8,37,10,37,12,37,424,
		9,37,1,37,1,37,3,37,428,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
		40,1,40,3,40,440,8,40,1,40,1,40,3,40,444,8,40,1,40,3,40,447,8,40,1,40,
		1,40,1,40,1,40,1,40,3,40,454,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,
		41,463,8,41,1,42,1,42,1,42,3,42,468,8,42,1,43,1,43,1,44,1,44,3,44,474,
		8,44,1,44,1,44,1,44,1,44,1,44,3,44,481,8,44,1,45,1,45,1,46,1,46,1,46,1,
		46,1,46,0,1,68,47,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,0,7,3,0,51,52,58,58,76,77,3,0,53,53,71,74,78,79,3,0,63,63,
		70,70,76,77,1,0,64,69,1,0,51,52,1,0,34,35,2,0,82,82,85,85,516,0,97,1,0,
		0,0,2,113,1,0,0,0,4,124,1,0,0,0,6,126,1,0,0,0,8,128,1,0,0,0,10,134,1,0,
		0,0,12,151,1,0,0,0,14,153,1,0,0,0,16,155,1,0,0,0,18,158,1,0,0,0,20,165,
		1,0,0,0,22,176,1,0,0,0,24,183,1,0,0,0,26,203,1,0,0,0,28,208,1,0,0,0,30,
		210,1,0,0,0,32,238,1,0,0,0,34,247,1,0,0,0,36,262,1,0,0,0,38,264,1,0,0,
		0,40,270,1,0,0,0,42,274,1,0,0,0,44,283,1,0,0,0,46,287,1,0,0,0,48,293,1,
		0,0,0,50,297,1,0,0,0,52,304,1,0,0,0,54,306,1,0,0,0,56,312,1,0,0,0,58,314,
		1,0,0,0,60,316,1,0,0,0,62,322,1,0,0,0,64,326,1,0,0,0,66,333,1,0,0,0,68,
		351,1,0,0,0,70,383,1,0,0,0,72,398,1,0,0,0,74,400,1,0,0,0,76,429,1,0,0,
		0,78,433,1,0,0,0,80,437,1,0,0,0,82,462,1,0,0,0,84,467,1,0,0,0,86,469,1,
		0,0,0,88,480,1,0,0,0,90,482,1,0,0,0,92,484,1,0,0,0,94,96,3,2,1,0,95,94,
		1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,103,1,0,0,0,99,97,
		1,0,0,0,100,102,3,8,4,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,
		0,103,104,1,0,0,0,104,110,1,0,0,0,105,103,1,0,0,0,106,109,3,10,5,0,107,
		109,3,24,12,0,108,106,1,0,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,
		1,0,0,0,110,111,1,0,0,0,111,1,1,0,0,0,112,110,1,0,0,0,113,114,5,30,0,0,
		114,119,3,4,2,0,115,116,5,47,0,0,116,118,3,4,2,0,117,115,1,0,0,0,118,121,
		1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,122,1,0,0,0,121,119,1,0,0,
		0,122,123,5,48,0,0,123,3,1,0,0,0,124,125,5,37,0,0,125,5,1,0,0,0,126,127,
		5,37,0,0,127,7,1,0,0,0,128,129,5,1,0,0,129,130,3,6,3,0,130,131,5,2,0,0,
		131,132,3,30,15,0,132,133,5,48,0,0,133,9,1,0,0,0,134,135,3,14,7,0,135,
		144,5,38,0,0,136,141,3,18,9,0,137,138,5,47,0,0,138,140,3,18,9,0,139,137,
		1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,145,1,0,0,
		0,143,141,1,0,0,0,144,136,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,
		147,5,39,0,0,147,148,5,49,0,0,148,149,3,28,14,0,149,150,3,12,6,0,150,11,
		1,0,0,0,151,152,3,32,16,0,152,13,1,0,0,0,153,154,5,37,0,0,154,15,1,0,0,
		0,155,156,5,70,0,0,156,157,3,68,34,0,157,17,1,0,0,0,158,159,3,52,26,0,
		159,160,5,49,0,0,160,163,3,28,14,0,161,164,3,16,8,0,162,164,3,20,10,0,
		163,161,1,0,0,0,163,162,1,0,0,0,163,164,1,0,0,0,164,19,1,0,0,0,165,166,
		5,40,0,0,166,171,3,22,11,0,167,168,5,47,0,0,168,170,3,22,11,0,169,167,
		1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,
		0,173,171,1,0,0,0,174,175,5,41,0,0,175,21,1,0,0,0,176,177,5,37,0,0,177,
		178,5,49,0,0,178,181,5,37,0,0,179,182,3,16,8,0,180,182,3,20,10,0,181,179,
		1,0,0,0,181,180,1,0,0,0,181,182,1,0,0,0,182,23,1,0,0,0,183,184,5,5,0,0,
		184,187,5,37,0,0,185,186,5,11,0,0,186,188,3,28,14,0,187,185,1,0,0,0,187,
		188,1,0,0,0,188,191,1,0,0,0,189,190,5,19,0,0,190,192,3,6,3,0,191,189,1,
		0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,198,5,40,0,0,194,197,3,10,5,
		0,195,197,3,26,13,0,196,194,1,0,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,
		196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,5,
		41,0,0,202,25,1,0,0,0,203,204,5,37,0,0,204,205,5,49,0,0,205,206,5,37,0,
		0,206,207,5,48,0,0,207,27,1,0,0,0,208,209,5,37,0,0,209,29,1,0,0,0,210,
		211,5,37,0,0,211,212,5,49,0,0,212,213,5,71,0,0,213,214,5,71,0,0,214,219,
		5,37,0,0,215,216,5,50,0,0,216,218,5,37,0,0,217,215,1,0,0,0,218,221,1,0,
		0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,226,1,0,0,0,221,219,1,0,0,0,222,
		223,5,71,0,0,223,225,5,37,0,0,224,222,1,0,0,0,225,228,1,0,0,0,226,224,
		1,0,0,0,226,227,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,229,231,5,71,0,
		0,230,229,1,0,0,0,230,231,1,0,0,0,231,236,1,0,0,0,232,234,5,80,0,0,233,
		235,5,37,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,232,1,
		0,0,0,236,237,1,0,0,0,237,31,1,0,0,0,238,242,5,40,0,0,239,241,3,36,18,
		0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,
		245,1,0,0,0,244,242,1,0,0,0,245,246,5,41,0,0,246,33,1,0,0,0,247,250,3,
		50,25,0,248,249,5,46,0,0,249,251,3,68,34,0,250,248,1,0,0,0,250,251,1,0,
		0,0,251,252,1,0,0,0,252,253,5,48,0,0,253,35,1,0,0,0,254,263,3,32,16,0,
		255,263,3,42,21,0,256,263,3,46,23,0,257,263,3,48,24,0,258,263,3,38,19,
		0,259,263,3,44,22,0,260,263,3,40,20,0,261,263,3,34,17,0,262,254,1,0,0,
		0,262,255,1,0,0,0,262,256,1,0,0,0,262,257,1,0,0,0,262,258,1,0,0,0,262,
		259,1,0,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,37,1,0,0,0,264,265,3,68,
		34,0,265,266,5,46,0,0,266,267,3,68,34,0,267,268,5,48,0,0,268,39,1,0,0,
		0,269,271,3,68,34,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,
		273,5,48,0,0,273,41,1,0,0,0,274,275,5,17,0,0,275,276,5,38,0,0,276,277,
		3,68,34,0,277,278,5,39,0,0,278,281,3,36,18,0,279,280,5,10,0,0,280,282,
		3,36,18,0,281,279,1,0,0,0,281,282,1,0,0,0,282,43,1,0,0,0,283,284,5,25,
		0,0,284,285,3,68,34,0,285,286,5,48,0,0,286,45,1,0,0,0,287,288,5,32,0,0,
		288,289,5,38,0,0,289,290,3,68,34,0,290,291,5,39,0,0,291,292,3,36,18,0,
		292,47,1,0,0,0,293,294,5,33,0,0,294,295,3,68,34,0,295,296,3,36,18,0,296,
		49,1,0,0,0,297,298,3,52,26,0,298,302,5,49,0,0,299,303,3,28,14,0,300,303,
		3,62,31,0,301,303,3,64,32,0,302,299,1,0,0,0,302,300,1,0,0,0,302,301,1,
		0,0,0,303,51,1,0,0,0,304,305,5,37,0,0,305,53,1,0,0,0,306,307,5,44,0,0,
		307,308,3,56,28,0,308,309,5,45,0,0,309,55,1,0,0,0,310,313,3,58,29,0,311,
		313,3,60,30,0,312,310,1,0,0,0,312,311,1,0,0,0,313,57,1,0,0,0,314,315,3,
		66,33,0,315,59,1,0,0,0,316,317,3,52,26,0,317,318,5,19,0,0,318,319,3,68,
		34,0,319,320,5,80,0,0,320,321,3,68,34,0,321,61,1,0,0,0,322,323,5,44,0,
		0,323,324,3,28,14,0,324,325,5,45,0,0,325,63,1,0,0,0,326,327,3,28,14,0,
		327,329,5,44,0,0,328,330,3,72,36,0,329,328,1,0,0,0,329,330,1,0,0,0,330,
		331,1,0,0,0,331,332,5,45,0,0,332,65,1,0,0,0,333,338,3,68,34,0,334,335,
		5,47,0,0,335,337,3,68,34,0,336,334,1,0,0,0,337,340,1,0,0,0,338,336,1,0,
		0,0,338,339,1,0,0,0,339,67,1,0,0,0,340,338,1,0,0,0,341,342,6,34,-1,0,342,
		343,5,37,0,0,343,345,5,38,0,0,344,346,3,66,33,0,345,344,1,0,0,0,345,346,
		1,0,0,0,346,347,1,0,0,0,347,352,5,39,0,0,348,349,7,0,0,0,349,352,3,68,
		34,3,350,352,3,72,36,0,351,341,1,0,0,0,351,348,1,0,0,0,351,350,1,0,0,0,
		352,380,1,0,0,0,353,354,10,12,0,0,354,355,5,50,0,0,355,379,3,68,34,13,
		356,357,10,10,0,0,357,358,5,75,0,0,358,379,3,68,34,10,359,360,10,9,0,0,
		360,361,7,1,0,0,361,379,3,68,34,10,362,363,10,8,0,0,363,364,7,2,0,0,364,
		379,3,68,34,9,365,366,10,7,0,0,366,367,7,3,0,0,367,379,3,68,34,8,368,369,
		10,6,0,0,369,370,5,60,0,0,370,379,3,68,34,7,371,372,10,5,0,0,372,373,5,
		59,0,0,373,379,3,68,34,6,374,375,10,11,0,0,375,379,3,78,39,0,376,377,10,
		2,0,0,377,379,7,4,0,0,378,353,1,0,0,0,378,356,1,0,0,0,378,359,1,0,0,0,
		378,362,1,0,0,0,378,365,1,0,0,0,378,368,1,0,0,0,378,371,1,0,0,0,378,374,
		1,0,0,0,378,376,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,
		0,381,69,1,0,0,0,382,380,1,0,0,0,383,384,3,14,7,0,384,386,5,38,0,0,385,
		387,3,66,33,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,389,
		5,39,0,0,389,71,1,0,0,0,390,399,3,82,41,0,391,399,3,54,27,0,392,399,3,
		52,26,0,393,394,5,38,0,0,394,395,3,68,34,0,395,396,5,39,0,0,396,399,1,
		0,0,0,397,399,3,74,37,0,398,390,1,0,0,0,398,391,1,0,0,0,398,392,1,0,0,
		0,398,393,1,0,0,0,398,397,1,0,0,0,399,73,1,0,0,0,400,401,5,22,0,0,401,
		414,3,28,14,0,402,411,5,38,0,0,403,408,3,18,9,0,404,405,5,47,0,0,405,407,
		3,18,9,0,406,404,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,
		0,409,412,1,0,0,0,410,408,1,0,0,0,411,403,1,0,0,0,411,412,1,0,0,0,412,
		413,1,0,0,0,413,415,5,39,0,0,414,402,1,0,0,0,414,415,1,0,0,0,415,427,1,
		0,0,0,416,417,5,40,0,0,417,422,3,76,38,0,418,419,5,47,0,0,419,421,3,76,
		38,0,420,418,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,
		425,1,0,0,0,424,422,1,0,0,0,425,426,5,41,0,0,426,428,1,0,0,0,427,416,1,
		0,0,0,427,428,1,0,0,0,428,75,1,0,0,0,429,430,3,52,26,0,430,431,5,46,0,
		0,431,432,3,68,34,0,432,77,1,0,0,0,433,434,5,44,0,0,434,435,3,68,34,0,
		435,436,5,45,0,0,436,79,1,0,0,0,437,453,5,44,0,0,438,440,3,68,34,0,439,
		438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,443,5,49,0,0,442,444,3,
		68,34,0,443,442,1,0,0,0,443,444,1,0,0,0,444,454,1,0,0,0,445,447,3,68,34,
		0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,5,49,0,0,449,
		450,3,68,34,0,450,451,5,49,0,0,451,452,3,68,34,0,452,454,1,0,0,0,453,439,
		1,0,0,0,453,446,1,0,0,0,454,455,1,0,0,0,455,456,5,45,0,0,456,81,1,0,0,
		0,457,463,5,36,0,0,458,463,3,88,44,0,459,463,3,86,43,0,460,463,3,84,42,
		0,461,463,5,90,0,0,462,457,1,0,0,0,462,458,1,0,0,0,462,459,1,0,0,0,462,
		460,1,0,0,0,462,461,1,0,0,0,463,83,1,0,0,0,464,468,5,102,0,0,465,468,5,
		103,0,0,466,468,5,101,0,0,467,464,1,0,0,0,467,465,1,0,0,0,467,466,1,0,
		0,0,468,85,1,0,0,0,469,470,7,5,0,0,470,87,1,0,0,0,471,473,5,86,0,0,472,
		474,7,6,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,481,1,0,0,0,475,481,5,
		87,0,0,476,481,5,88,0,0,477,481,5,89,0,0,478,481,5,94,0,0,479,481,5,95,
		0,0,480,471,1,0,0,0,480,475,1,0,0,0,480,476,1,0,0,0,480,477,1,0,0,0,480,
		478,1,0,0,0,480,479,1,0,0,0,481,89,1,0,0,0,482,483,5,37,0,0,483,91,1,0,
		0,0,484,485,5,37,0,0,485,486,5,50,0,0,486,487,5,37,0,0,487,93,1,0,0,0,
		47,97,103,108,110,119,141,144,163,171,181,187,191,196,198,219,226,230,
		234,236,242,250,262,270,281,302,312,329,338,345,351,378,380,386,398,408,
		411,414,422,427,439,443,446,453,462,467,473,480
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
