//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FifthParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class FifthParser : FifthParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, BREAK=3, CASE=4, CLASS=5, CONST=6, CONTINUE=7, DEFAULT=8, 
		DEFER=9, ELSE=10, EXTENDS=11, FALLTHROUGH=12, FOR=13, FUNC=14, GO=15, 
		GOTO=16, GRAPH=17, IF=18, IMPORT=19, IN=20, INTERFACE=21, MAP=22, NEW=23, 
		PACKAGE=24, RANGE=25, RETURN=26, SELECT=27, SPARQL=28, STORE=29, STRUCT=30, 
		SWITCH=31, TYPE=32, USE=33, VAR=34, WHILE=35, WITH=36, TRUE=37, FALSE=38, 
		NIL_LIT=39, IDENTIFIER=40, L_PAREN=41, R_PAREN=42, L_CURLY=43, R_CURLY=44, 
		L_GRAPH=45, R_GRAPH=46, L_BRACKET=47, R_BRACKET=48, ASSIGN=49, COMMA=50, 
		SEMI=51, COLON=52, DOT=53, PLUS_PLUS=54, MINUS_MINUS=55, PLUS_ASSIGN=56, 
		STAR_STAR=57, DECLARE_ASSIGN=58, ELLIPSIS=59, GEN=60, UNDERSCORE=61, LOGICAL_NOT=62, 
		LOGICAL_OR=63, LOGICAL_AND=64, LOGICAL_NAND=65, LOGICAL_NOR=66, LOGICAL_XOR=67, 
		EQUALS=68, NOT_EQUALS=69, LESS=70, LESS_OR_EQUALS=71, GREATER=72, GREATER_OR_EQUALS=73, 
		OR=74, DIV=75, MOD=76, LSHIFT=77, RSHIFT=78, POW=79, PLUS=80, MINUS=81, 
		STAR=82, AMPERSAND=83, SUCH_THAT=84, CONCAT=85, IRIREF=86, SUF_SHORT=87, 
		SUF_DECIMAL=88, SUF_DOUBLE=89, SUF_LONG=90, DECIMAL_LIT=91, BINARY_LIT=92, 
		OCTAL_LIT=93, HEX_LIT=94, REAL_LITERAL=95, FLOAT_LIT=96, DECIMAL_FLOAT_LIT=97, 
		HEX_FLOAT_LIT=98, IMAGINARY_LIT=99, RUNE_LIT=100, BYTE_VALUE=101, OCTAL_BYTE_VALUE=102, 
		HEX_BYTE_VALUE=103, LITTLE_U_VALUE=104, BIG_U_VALUE=105, RAW_STRING_LIT=106, 
		INTERPRETED_STRING_LIT=107, INTERPOLATED_STRING_LIT=108, WS=109, COMMENT=110, 
		TERMINATOR=111, LINE_COMMENT=112, WS_NLSEMI=113, COMMENT_NLSEMI=114, LINE_COMMENT_NLSEMI=115, 
		EOS=116, PrefixedName=117, PNAME_LN=118, PN_LOCAL=119, PLX=120, PERCENT=121, 
		PNAME_NS=122, PN_PREFIX=123, PN_LOCAL_ESC=124;
	public const int
		RULE_fifth = 0, RULE_module_import = 1, RULE_module_name = 2, RULE_packagename = 3, 
		RULE_alias = 4, RULE_function_declaration = 5, RULE_function_body = 6, 
		RULE_function_name = 7, RULE_variable_constraint = 8, RULE_paramdecl = 9, 
		RULE_destructuring_decl = 10, RULE_destructure_binding = 11, RULE_class_definition = 12, 
		RULE_property_declaration = 13, RULE_type_name = 14, RULE_block = 15, 
		RULE_graphAssertionBlock = 16, RULE_declaration = 17, RULE_statement = 18, 
		RULE_graph_assertion_statement = 19, RULE_assignment_statement = 20, RULE_expression_statement = 21, 
		RULE_if_statement = 22, RULE_return_statement = 23, RULE_while_statement = 24, 
		RULE_with_statement = 25, RULE_var_decl = 26, RULE_var_name = 27, RULE_list = 28, 
		RULE_list_body = 29, RULE_list_literal = 30, RULE_list_comprehension = 31, 
		RULE_list_type_signature = 32, RULE_array_type_signature = 33, RULE_generic_type_signature = 34, 
		RULE_expressionList = 35, RULE_expression = 36, RULE_function_call_expression = 37, 
		RULE_operand = 38, RULE_object_instantiation_expression = 39, RULE_initialiser_property_assignment = 40, 
		RULE_index = 41, RULE_slice_ = 42, RULE_literal = 43, RULE_string_ = 44, 
		RULE_boolean = 45, RULE_integer = 46, RULE_operandName = 47, RULE_qualifiedIdent = 48, 
		RULE_iri = 49, RULE_graphDeclaration = 50, RULE_colon_graph_decl = 51, 
		RULE_alias_scope_ref = 52, RULE_colon_store_decl = 53;
	public static readonly string[] ruleNames = {
		"fifth", "module_import", "module_name", "packagename", "alias", "function_declaration", 
		"function_body", "function_name", "variable_constraint", "paramdecl", 
		"destructuring_decl", "destructure_binding", "class_definition", "property_declaration", 
		"type_name", "block", "graphAssertionBlock", "declaration", "statement", 
		"graph_assertion_statement", "assignment_statement", "expression_statement", 
		"if_statement", "return_statement", "while_statement", "with_statement", 
		"var_decl", "var_name", "list", "list_body", "list_literal", "list_comprehension", 
		"list_type_signature", "array_type_signature", "generic_type_signature", 
		"expressionList", "expression", "function_call_expression", "operand", 
		"object_instantiation_expression", "initialiser_property_assignment", 
		"index", "slice_", "literal", "string_", "boolean", "integer", "operandName", 
		"qualifiedIdent", "iri", "graphDeclaration", "colon_graph_decl", "alias_scope_ref", 
		"colon_store_decl"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'break'", "'case'", "'class'", "'const'", "'continue'", 
		"'default'", "'defer'", "'else'", "'extends'", "'fallthrough'", "'for'", 
		"'func'", "'go'", "'goto'", "'graph'", "'if'", "'import'", "'in'", "'interface'", 
		"'map'", "'new'", "'package'", "'range'", "'return'", "'select'", "'sparql_store'", 
		"'store'", "'struct'", "'switch'", "'type'", "'use'", "'var'", "'while'", 
		"'with'", "'true'", "'false'", "'null'", null, "'('", "')'", "'{'", "'}'", 
		"'<{'", "'}>'", "'['", "']'", "'='", "','", "';'", "':'", "'.'", "'++'", 
		"'--'", "'+='", "'**'", "':='", "'...'", "'<-'", "'_'", "'!'", "'||'", 
		"'&&'", "'!&'", "'!|'", "'~'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
		"'|'", "'/'", "'%'", "'<<'", "'>>'", "'^'", "'+'", "'-'", "'*'", "'&'", 
		"'#'", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "BREAK", "CASE", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
		"DEFER", "ELSE", "EXTENDS", "FALLTHROUGH", "FOR", "FUNC", "GO", "GOTO", 
		"GRAPH", "IF", "IMPORT", "IN", "INTERFACE", "MAP", "NEW", "PACKAGE", "RANGE", 
		"RETURN", "SELECT", "SPARQL", "STORE", "STRUCT", "SWITCH", "TYPE", "USE", 
		"VAR", "WHILE", "WITH", "TRUE", "FALSE", "NIL_LIT", "IDENTIFIER", "L_PAREN", 
		"R_PAREN", "L_CURLY", "R_CURLY", "L_GRAPH", "R_GRAPH", "L_BRACKET", "R_BRACKET", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS", 
		"PLUS_ASSIGN", "STAR_STAR", "DECLARE_ASSIGN", "ELLIPSIS", "GEN", "UNDERSCORE", 
		"LOGICAL_NOT", "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NAND", "LOGICAL_NOR", 
		"LOGICAL_XOR", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", 
		"GREATER_OR_EQUALS", "OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "POW", "PLUS", 
		"MINUS", "STAR", "AMPERSAND", "SUCH_THAT", "CONCAT", "IRIREF", "SUF_SHORT", 
		"SUF_DECIMAL", "SUF_DOUBLE", "SUF_LONG", "DECIMAL_LIT", "BINARY_LIT", 
		"OCTAL_LIT", "HEX_LIT", "REAL_LITERAL", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", 
		"HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", 
		"HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", 
		"INTERPOLATED_STRING_LIT", "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", 
		"WS_NLSEMI", "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "PrefixedName", 
		"PNAME_LN", "PN_LOCAL", "PLX", "PERCENT", "PNAME_NS", "PN_PREFIX", "PN_LOCAL_ESC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FifthParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FifthContext : ParserRuleContext {
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Class_definitionContext _class_definition;
		public IList<Class_definitionContext> _classes = new List<Class_definitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_store_declContext[] colon_store_decl() {
			return GetRuleContexts<Colon_store_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_store_declContext colon_store_decl(int i) {
			return GetRuleContext<Colon_store_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext[] class_definition() {
			return GetRuleContexts<Class_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext class_definition(int i) {
			return GetRuleContext<Class_definitionContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFifth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 0, RULE_fifth);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 108;
				module_import();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 114;
				alias();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 120;
					colon_store_decl();
					}
					} 
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CLASS || _la==IDENTIFIER) {
				{
				State = 128;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 126;
					_localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case CLASS:
					{
					State = 127;
					_localctx._class_definition = class_definition();
					_localctx._classes.Add(_localctx._class_definition);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext[] module_name() {
			return GetRuleContexts<Module_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name(int i) {
			return GetRuleContext<Module_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 2, RULE_module_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(USE);
			State = 134;
			module_name();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 135;
				Match(COMMA);
				State = 136;
				module_name();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 6, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public PackagenameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(ALIAS);
			State = 149;
			_localctx.name = packagename();
			State = 150;
			Match(AS);
			State = 151;
			iri();
			State = 152;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext name;
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _args = new List<ParamdeclContext>();
		public Type_nameContext result_type;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_localctx.name = function_name();
			State = 155;
			Match(L_PAREN);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 156;
				_localctx._paramdecl = paramdecl();
				_localctx._args.Add(_localctx._paramdecl);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 157;
					Match(COMMA);
					State = 158;
					_localctx._paramdecl = paramdecl();
					_localctx._args.Add(_localctx._paramdecl);
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 166;
			Match(R_PAREN);
			State = 167;
			Match(COLON);
			State = 168;
			_localctx.result_type = type_name();
			State = 169;
			_localctx.body = function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_constraintContext : ParserRuleContext {
		public ExpressionContext constraint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FifthParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVariable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVariable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_constraintContext variable_constraint() {
		Variable_constraintContext _localctx = new Variable_constraintContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(OR);
			State = 176;
			_localctx.constraint = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamdeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public ParamdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramdecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterParamdecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitParamdecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamdeclContext paramdecl() {
		ParamdeclContext _localctx = new ParamdeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_paramdecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			var_name();
			State = 179;
			Match(COLON);
			State = 180;
			type_name();
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				{
				State = 181;
				variable_constraint();
				}
				break;
			case L_CURLY:
				{
				State = 182;
				destructuring_decl();
				}
				break;
			case R_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructuring_declContext : ParserRuleContext {
		public Destructure_bindingContext _destructure_binding;
		public IList<Destructure_bindingContext> _bindings = new List<Destructure_bindingContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Destructure_bindingContext[] destructure_binding() {
			return GetRuleContexts<Destructure_bindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructure_bindingContext destructure_binding(int i) {
			return GetRuleContext<Destructure_bindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Destructuring_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructuring_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDestructuring_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDestructuring_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructuring_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructuring_declContext destructuring_decl() {
		Destructuring_declContext _localctx = new Destructuring_declContext(Context, State);
		EnterRule(_localctx, 20, RULE_destructuring_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(L_CURLY);
			State = 186;
			_localctx._destructure_binding = destructure_binding();
			_localctx._bindings.Add(_localctx._destructure_binding);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 187;
				Match(COMMA);
				State = 188;
				_localctx._destructure_binding = destructure_binding();
				_localctx._bindings.Add(_localctx._destructure_binding);
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructure_bindingContext : ParserRuleContext {
		public IToken name;
		public IToken propname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public Destructure_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructure_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDestructure_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDestructure_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructure_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructure_bindingContext destructure_binding() {
		Destructure_bindingContext _localctx = new Destructure_bindingContext(Context, State);
		EnterRule(_localctx, 22, RULE_destructure_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_localctx.name = Match(IDENTIFIER);
			State = 197;
			Match(COLON);
			State = 198;
			_localctx.propname = Match(IDENTIFIER);
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				{
				State = 199;
				variable_constraint();
				}
				break;
			case L_CURLY:
				{
				State = 200;
				destructuring_decl();
				}
				break;
			case R_CURLY:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public IToken name;
		public Type_nameContext superClass;
		public Alias_scope_refContext aliasScope;
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Property_declarationContext _property_declaration;
		public IList<Property_declarationContext> _properties = new List<Property_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FifthParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(FifthParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_scope_refContext alias_scope_ref() {
			return GetRuleContext<Alias_scope_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext[] property_declaration() {
			return GetRuleContexts<Property_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext property_declaration(int i) {
			return GetRuleContext<Property_declarationContext>(i);
		}
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(CLASS);
			State = 204;
			_localctx.name = Match(IDENTIFIER);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 205;
				Match(EXTENDS);
				State = 206;
				_localctx.superClass = type_name();
				}
			}

			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 209;
				Match(IN);
				State = 210;
				_localctx.aliasScope = alias_scope_ref();
				}
			}

			State = 213;
			Match(L_CURLY);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				State = 216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 214;
					_localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case 2:
					{
					State = 215;
					_localctx._property_declaration = property_declaration();
					_localctx._properties.Add(_localctx._property_declaration);
					}
					break;
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 221;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_property_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_localctx.name = Match(IDENTIFIER);
			State = 224;
			Match(COLON);
			State = 225;
			_localctx.type = Match(IDENTIFIER);
			State = 226;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(L_CURLY);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4668170095485517824L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
				{
				{
				State = 231;
				statement();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphAssertionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_GRAPH() { return GetToken(FifthParser.L_GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_GRAPH() { return GetToken(FifthParser.R_GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GraphAssertionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphAssertionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGraphAssertionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGraphAssertionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphAssertionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphAssertionBlockContext graphAssertionBlock() {
		GraphAssertionBlockContext _localctx = new GraphAssertionBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_graphAssertionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(L_GRAPH);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4668170095485517824L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
				{
				{
				State = 240;
				statement();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(R_GRAPH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Var_declContext decl;
		public ExpressionContext init;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_localctx.decl = var_decl();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 249;
				Match(ASSIGN);
				State = 250;
				_localctx.init = expression(0);
				}
			}

			State = 253;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Graph_assertion_statementContext graph_assertion_statement() {
			return GetRuleContext<Graph_assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_statementContext with_statement() {
			return GetRuleContext<With_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_store_declContext colon_store_decl() {
			return GetRuleContext<Colon_store_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_graph_declContext colon_graph_decl() {
			return GetRuleContext<Colon_graph_declContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				graph_assertion_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257;
				if_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258;
				while_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 259;
				with_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 260;
				assignment_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 261;
				return_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 262;
				expression_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 263;
				declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 264;
				colon_store_decl();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 265;
				colon_graph_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Graph_assertion_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GraphAssertionBlockContext graphAssertionBlock() {
			return GetRuleContext<GraphAssertionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		public Graph_assertion_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graph_assertion_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGraph_assertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGraph_assertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraph_assertion_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Graph_assertion_statementContext graph_assertion_statement() {
		Graph_assertion_statementContext _localctx = new Graph_assertion_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_graph_assertion_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			graphAssertionBlock();
			State = 269;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(FifthParser.PLUS_ASSIGN, 0); }
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAssignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAssignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_localctx.lvalue = expression(0);
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 272;
				_localctx.op = Match(ASSIGN);
				}
				break;
			case PLUS_ASSIGN:
				{
				State = 273;
				_localctx.op = Match(PLUS_ASSIGN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 276;
			_localctx.rvalue = expression(0);
			State = 277;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4665909396432224256L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
				{
				State = 279;
				expression(0);
				}
			}

			State = 282;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext ifpart;
		public StatementContext elsepart;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(IF);
			State = 285;
			Match(L_PAREN);
			State = 286;
			_localctx.condition = expression(0);
			State = 287;
			Match(R_PAREN);
			State = 288;
			_localctx.ifpart = statement();
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 289;
				Match(ELSE);
				State = 290;
				_localctx.elsepart = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(FifthParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(RETURN);
			State = 294;
			expression(0);
			State = 295;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext looppart;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(FifthParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(WHILE);
			State = 298;
			Match(L_PAREN);
			State = 299;
			_localctx.condition = expression(0);
			State = 300;
			Match(R_PAREN);
			State = 301;
			_localctx.looppart = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public With_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterWith_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitWith_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_statementContext with_statement() {
		With_statementContext _localctx = new With_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_with_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(WITH);
			State = 304;
			expression(0);
			State = 305;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_type_signatureContext list_type_signature() {
			return GetRuleContext<List_type_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_signatureContext array_type_signature() {
			return GetRuleContext<Array_type_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_type_signatureContext generic_type_signature() {
			return GetRuleContext<Generic_type_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 52, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			var_name();
			State = 308;
			Match(COLON);
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 309;
				list_type_signature();
				}
				break;
			case 2:
				{
				State = 310;
				array_type_signature();
				}
				break;
			case 3:
				{
				State = 311;
				generic_type_signature();
				}
				break;
			case 4:
				{
				State = 312;
				type_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_bodyContext list_body() {
			return GetRuleContext<List_bodyContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 56, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(L_BRACKET);
			State = 318;
			_localctx.body = list_body();
			State = 319;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_comprehensionContext list_comprehension() {
			return GetRuleContext<List_comprehensionContext>(0);
		}
		public List_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_bodyContext list_body() {
		List_bodyContext _localctx = new List_bodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_list_body);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				list_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				list_comprehension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 60, RULE_list_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_comprehensionContext : ParserRuleContext {
		public Var_nameContext varname;
		public ExpressionContext source;
		public ExpressionContext constraint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCH_THAT() { return GetToken(FifthParser.SUCH_THAT, 0); }
		public List_comprehensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_comprehension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_comprehension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_comprehension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_comprehension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_comprehensionContext list_comprehension() {
		List_comprehensionContext _localctx = new List_comprehensionContext(Context, State);
		EnterRule(_localctx, 62, RULE_list_comprehension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_localctx.varname = var_name();
			State = 328;
			Match(IN);
			State = 329;
			_localctx.source = expression(0);
			{
			State = 330;
			Match(SUCH_THAT);
			State = 331;
			_localctx.constraint = expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_type_signatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		public List_type_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_type_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_type_signatureContext list_type_signature() {
		List_type_signatureContext _localctx = new List_type_signatureContext(Context, State);
		EnterRule(_localctx, 64, RULE_list_type_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(L_BRACKET);
			State = 334;
			type_name();
			State = 335;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_signatureContext : ParserRuleContext {
		public OperandContext size;
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Array_type_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterArray_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitArray_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_signatureContext array_type_signature() {
		Array_type_signatureContext _localctx = new Array_type_signatureContext(Context, State);
		EnterRule(_localctx, 66, RULE_array_type_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			type_name();
			State = 338;
			Match(L_BRACKET);
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180182476390400L) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 230175L) != 0)) {
				{
				State = 339;
				_localctx.size = operand();
				}
			}

			State = 342;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_type_signatureContext : ParserRuleContext {
		public IToken generic_name;
		public Type_nameContext inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Generic_type_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_type_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGeneric_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGeneric_type_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_type_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_type_signatureContext generic_type_signature() {
		Generic_type_signatureContext _localctx = new Generic_type_signatureContext(Context, State);
		EnterRule(_localctx, 68, RULE_generic_type_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			_localctx.generic_name = Match(IDENTIFIER);
			State = 345;
			Match(LESS);
			State = 346;
			_localctx.inner = type_name();
			State = 347;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 70, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			_localctx._expression = expression(0);
			_localctx._expressions.Add(_localctx._expression);
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 350;
				Match(COMMA);
				State = 351;
				_localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Exp_mulContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken mul_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(FifthParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(FifthParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(FifthParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(FifthParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(FifthParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(FifthParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR_STAR() { return GetToken(FifthParser.STAR_STAR, 0); }
		public Exp_mulContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_mul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_andContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(FifthParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_andContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_and(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_relContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken rel_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(FifthParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(FifthParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(FifthParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(FifthParser.GREATER_OR_EQUALS, 0); }
		public Exp_relContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_rel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_rel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_rel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_operandContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphAssertionBlockContext graphAssertionBlock() {
			return GetRuleContext<GraphAssertionBlockContext>(0);
		}
		public Exp_operandContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_operand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_unary_postfixContext : ExpressionContext {
		public IToken unary_op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(FifthParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(FifthParser.MINUS_MINUS, 0); }
		public Exp_unary_postfixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_unary_postfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_unary_postfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_unary_postfix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_unaryContext : ExpressionContext {
		public IToken unary_op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_NOT() { return GetToken(FifthParser.LOGICAL_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(FifthParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(FifthParser.MINUS_MINUS, 0); }
		public Exp_unaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_unary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_expContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(FifthParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_expContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_funccallContext : ExpressionContext {
		public IToken funcname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Exp_funccallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_funccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_funccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_funccall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_member_accessContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FifthParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_member_accessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_member_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_member_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_member_access(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_orContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(FifthParser.LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_orContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_addContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken add_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FifthParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_XOR() { return GetToken(FifthParser.LOGICAL_XOR, 0); }
		public Exp_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_indexContext : ExpressionContext {
		public ExpressionContext lhs;
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Exp_indexContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				_localctx = new Exp_funccallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 358;
				((Exp_funccallContext)_localctx).funcname = Match(IDENTIFIER);
				State = 359;
				Match(L_PAREN);
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4665909396432224256L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
					{
					State = 360;
					expressionList();
					}
				}

				State = 363;
				Match(R_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new Exp_unaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 364;
				((Exp_unaryContext)_localctx).unary_op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 201326851L) != 0)) ) {
					((Exp_unaryContext)_localctx).unary_op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 365;
				expression(4);
				}
				break;
			case 3:
				{
				_localctx = new Exp_operandContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366;
				operand();
				}
				break;
			case 4:
				{
				_localctx = new Exp_operandContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 367;
				graphAssertionBlock();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 395;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new Exp_member_accessContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_member_accessContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 370;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 371;
						Match(DOT);
						State = 372;
						((Exp_member_accessContext)_localctx).rhs = expression(14);
						}
						break;
					case 2:
						{
						_localctx = new Exp_expContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_expContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 373;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 374;
						Match(POW);
						State = 375;
						((Exp_expContext)_localctx).rhs = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new Exp_mulContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_mulContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 376;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 377;
						((Exp_mulContext)_localctx).mul_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 104595457L) != 0)) ) {
							((Exp_mulContext)_localctx).mul_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 378;
						((Exp_mulContext)_localctx).rhs = expression(11);
						}
						break;
					case 4:
						{
						_localctx = new Exp_addContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_addContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 379;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 380;
						((Exp_addContext)_localctx).add_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 24705L) != 0)) ) {
							((Exp_addContext)_localctx).add_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 381;
						((Exp_addContext)_localctx).rhs = expression(10);
						}
						break;
					case 5:
						{
						_localctx = new Exp_relContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_relContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 382;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 383;
						((Exp_relContext)_localctx).rel_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 63L) != 0)) ) {
							((Exp_relContext)_localctx).rel_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 384;
						((Exp_relContext)_localctx).rhs = expression(9);
						}
						break;
					case 6:
						{
						_localctx = new Exp_andContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_andContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 385;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 386;
						Match(LOGICAL_AND);
						State = 387;
						((Exp_andContext)_localctx).rhs = expression(8);
						}
						break;
					case 7:
						{
						_localctx = new Exp_orContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_orContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 388;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 389;
						Match(LOGICAL_OR);
						State = 390;
						((Exp_orContext)_localctx).rhs = expression(7);
						}
						break;
					case 8:
						{
						_localctx = new Exp_indexContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_indexContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 391;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 392;
						index();
						}
						break;
					case 9:
						{
						_localctx = new Exp_unary_postfixContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 393;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 394;
						((Exp_unary_postfixContext)_localctx).unary_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
							((Exp_unary_postfixContext)_localctx).unary_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_expressionContext : ParserRuleContext {
		public Function_nameContext un;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Function_call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_expressionContext function_call_expression() {
		Function_call_expressionContext _localctx = new Function_call_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_function_call_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_localctx.un = function_name();
			State = 401;
			Match(L_PAREN);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4665909396432224256L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
				{
				State = 402;
				expressionList();
				}
			}

			State = 405;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphAssertionBlockContext graphAssertionBlock() {
			return GetRuleContext<GraphAssertionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_instantiation_expressionContext object_instantiation_expression() {
			return GetRuleContext<Object_instantiation_expressionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 76, RULE_operand);
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NIL_LIT:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case REAL_LITERAL:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
			case INTERPOLATED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				literal();
				}
				break;
			case L_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				list();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 409;
				var_name();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 410;
				Match(L_PAREN);
				State = 411;
				expression(0);
				State = 412;
				Match(R_PAREN);
				}
				break;
			case L_GRAPH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 414;
				graphAssertionBlock();
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 6);
				{
				State = 415;
				object_instantiation_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_instantiation_expressionContext : ParserRuleContext {
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _args = new List<ParamdeclContext>();
		public Initialiser_property_assignmentContext _initialiser_property_assignment;
		public IList<Initialiser_property_assignmentContext> _properties = new List<Initialiser_property_assignmentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initialiser_property_assignmentContext[] initialiser_property_assignment() {
			return GetRuleContexts<Initialiser_property_assignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initialiser_property_assignmentContext initialiser_property_assignment(int i) {
			return GetRuleContext<Initialiser_property_assignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		public Object_instantiation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_instantiation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterObject_instantiation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitObject_instantiation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_instantiation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_instantiation_expressionContext object_instantiation_expression() {
		Object_instantiation_expressionContext _localctx = new Object_instantiation_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_object_instantiation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(NEW);
			State = 419;
			type_name();
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 420;
				Match(L_PAREN);
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 421;
					_localctx._paramdecl = paramdecl();
					_localctx._args.Add(_localctx._paramdecl);
					State = 426;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 422;
						Match(COMMA);
						State = 423;
						_localctx._paramdecl = paramdecl();
						_localctx._args.Add(_localctx._paramdecl);
						}
						}
						State = 428;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 431;
				Match(R_PAREN);
				}
				break;
			}
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 434;
				Match(L_CURLY);
				State = 435;
				_localctx._initialiser_property_assignment = initialiser_property_assignment();
				_localctx._properties.Add(_localctx._initialiser_property_assignment);
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 436;
					Match(COMMA);
					State = 437;
					_localctx._initialiser_property_assignment = initialiser_property_assignment();
					_localctx._properties.Add(_localctx._initialiser_property_assignment);
					}
					}
					State = 442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 443;
				Match(R_CURLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initialiser_property_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Initialiser_property_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialiser_property_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterInitialiser_property_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitInitialiser_property_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialiser_property_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initialiser_property_assignmentContext initialiser_property_assignment() {
		Initialiser_property_assignmentContext _localctx = new Initialiser_property_assignmentContext(Context, State);
		EnterRule(_localctx, 80, RULE_initialiser_property_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			var_name();
			State = 448;
			Match(ASSIGN);
			State = 449;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 82, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(L_BRACKET);
			State = 452;
			expression(0);
			State = 453;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FifthParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FifthParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Slice_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slice_Context slice_() {
		Slice_Context _localctx = new Slice_Context(Context, State);
		EnterRule(_localctx, 84, RULE_slice_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(L_BRACKET);
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4665909396432224256L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
					{
					State = 456;
					expression(0);
					}
				}

				State = 459;
				Match(COLON);
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4665909396432224256L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
					{
					State = 460;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4665909396432224256L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
					{
					State = 463;
					expression(0);
					}
				}

				State = 466;
				Match(COLON);
				State = 467;
				expression(0);
				State = 468;
				Match(COLON);
				State = 469;
				expression(0);
				}
				break;
			}
			State = 473;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Lit_stringContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public Lit_stringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_nilContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT() { return GetToken(FifthParser.NIL_LIT, 0); }
		public Lit_nilContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_nil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_intContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Lit_intContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_boolContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Lit_boolContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_floatContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(FifthParser.REAL_LITERAL, 0); }
		public Lit_floatContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_literal);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
				_localctx = new Lit_nilContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				Match(NIL_LIT);
				}
				break;
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
				_localctx = new Lit_intContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				integer();
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new Lit_boolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				boolean();
				}
				break;
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
			case INTERPOLATED_STRING_LIT:
				_localctx = new Lit_stringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				string_();
				}
				break;
			case REAL_LITERAL:
				_localctx = new Lit_floatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 479;
				Match(REAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_Context : ParserRuleContext {
		public String_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_; } }
	 
		public String_Context() { }
		public virtual void CopyFrom(String_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Str_rawContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LIT() { return GetToken(FifthParser.RAW_STRING_LIT, 0); }
		public Str_rawContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_raw(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Str_plainContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPRETED_STRING_LIT() { return GetToken(FifthParser.INTERPRETED_STRING_LIT, 0); }
		public Str_plainContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_plain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_plain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_plain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Str_interpolatedContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_STRING_LIT() { return GetToken(FifthParser.INTERPOLATED_STRING_LIT, 0); }
		public Str_interpolatedContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_interpolated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_interpolated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_interpolated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_Context string_() {
		String_Context _localctx = new String_Context(Context, State);
		EnterRule(_localctx, 88, RULE_string_);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPRETED_STRING_LIT:
				_localctx = new Str_plainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				Match(INTERPRETED_STRING_LIT);
				}
				break;
			case INTERPOLATED_STRING_LIT:
				_localctx = new Str_interpolatedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				Match(INTERPOLATED_STRING_LIT);
				}
				break;
			case RAW_STRING_LIT:
				_localctx = new Str_rawContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 484;
				Match(RAW_STRING_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(FifthParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(FifthParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 90, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	 
		public IntegerContext() { }
		public virtual void CopyFrom(IntegerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Num_binaryContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LIT() { return GetToken(FifthParser.BINARY_LIT, 0); }
		public Num_binaryContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_binary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_hexContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(FifthParser.HEX_LIT, 0); }
		public Num_hexContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_hex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_runeContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(FifthParser.RUNE_LIT, 0); }
		public Num_runeContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_rune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_rune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_rune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_imaginaryContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGINARY_LIT() { return GetToken(FifthParser.IMAGINARY_LIT, 0); }
		public Num_imaginaryContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_imaginary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_imaginary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_imaginary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_decimalContext : IntegerContext {
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LIT() { return GetToken(FifthParser.DECIMAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUF_SHORT() { return GetToken(FifthParser.SUF_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUF_LONG() { return GetToken(FifthParser.SUF_LONG, 0); }
		public Num_decimalContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_decimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_octalContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LIT() { return GetToken(FifthParser.OCTAL_LIT, 0); }
		public Num_octalContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_octal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_octal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_octal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 92, RULE_integer);
		int _la;
		try {
			State = 498;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LIT:
				_localctx = new Num_decimalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				Match(DECIMAL_LIT);
				State = 491;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 490;
					((Num_decimalContext)_localctx).suffix = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==SUF_SHORT || _la==SUF_LONG) ) {
						((Num_decimalContext)_localctx).suffix = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BINARY_LIT:
				_localctx = new Num_binaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 493;
				Match(BINARY_LIT);
				}
				break;
			case OCTAL_LIT:
				_localctx = new Num_octalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 494;
				Match(OCTAL_LIT);
				}
				break;
			case HEX_LIT:
				_localctx = new Num_hexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 495;
				Match(HEX_LIT);
				}
				break;
			case IMAGINARY_LIT:
				_localctx = new Num_imaginaryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 496;
				Match(IMAGINARY_LIT);
				}
				break;
			case RUNE_LIT:
				_localctx = new Num_runeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 497;
				Match(RUNE_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 94, RULE_operandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FifthParser.DOT, 0); }
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 96, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(IDENTIFIER);
			State = 503;
			Match(DOT);
			State = 504;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRIREF() { return GetToken(FifthParser.IRIREF, 0); }
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(Context, State);
		EnterRule(_localctx, 98, RULE_iri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(IRIREF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphDeclarationContext : ParserRuleContext {
		public IToken name;
		public Alias_scope_refContext aliasScope;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(FifthParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext[] assignment_statement() {
			return GetRuleContexts<Assignment_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext assignment_statement(int i) {
			return GetRuleContext<Assignment_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_scope_refContext alias_scope_ref() {
			return GetRuleContext<Alias_scope_refContext>(0);
		}
		public GraphDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGraphDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGraphDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphDeclarationContext graphDeclaration() {
		GraphDeclarationContext _localctx = new GraphDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_graphDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(GRAPH);
			State = 509;
			_localctx.name = Match(IDENTIFIER);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 510;
				Match(IN);
				State = 511;
				_localctx.aliasScope = alias_scope_ref();
				}
			}

			State = 514;
			Match(ASSIGN);
			State = 515;
			Match(L_CURLY);
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4665909396432224256L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 471398403L) != 0)) {
				{
				{
				State = 516;
				assignment_statement();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 522;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_graph_declContext : ParserRuleContext {
		public IToken name;
		public Alias_scope_refContext aliasScope;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(FifthParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphAssertionBlockContext graphAssertionBlock() {
			return GetRuleContext<GraphAssertionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_scope_refContext alias_scope_ref() {
			return GetRuleContext<Alias_scope_refContext>(0);
		}
		public Colon_graph_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_graph_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterColon_graph_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitColon_graph_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_graph_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_graph_declContext colon_graph_decl() {
		Colon_graph_declContext _localctx = new Colon_graph_declContext(Context, State);
		EnterRule(_localctx, 102, RULE_colon_graph_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_localctx.name = Match(IDENTIFIER);
			State = 525;
			Match(COLON);
			State = 526;
			Match(GRAPH);
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 527;
				Match(IN);
				State = 528;
				_localctx.aliasScope = alias_scope_ref();
				}
			}

			State = 531;
			Match(ASSIGN);
			State = 532;
			graphAssertionBlock();
			State = 533;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_scope_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public Alias_scope_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_scope_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAlias_scope_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAlias_scope_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_scope_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_scope_refContext alias_scope_ref() {
		Alias_scope_refContext _localctx = new Alias_scope_refContext(Context, State);
		EnterRule(_localctx, 104, RULE_alias_scope_ref);
		try {
			State = 537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535;
				Match(IDENTIFIER);
				}
				break;
			case IRIREF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536;
				iri();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_store_declContext : ParserRuleContext {
		public IToken store_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORE() { return GetToken(FifthParser.STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPARQL() { return GetToken(FifthParser.SPARQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Colon_store_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_store_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterColon_store_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitColon_store_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_store_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_store_declContext colon_store_decl() {
		Colon_store_declContext _localctx = new Colon_store_declContext(Context, State);
		EnterRule(_localctx, 106, RULE_colon_store_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			_localctx.store_name = Match(IDENTIFIER);
			State = 540;
			Match(COLON);
			State = 541;
			Match(STORE);
			State = 542;
			Match(ASSIGN);
			State = 543;
			Match(SPARQL);
			State = 544;
			Match(L_PAREN);
			State = 545;
			iri();
			State = 546;
			Match(R_PAREN);
			State = 547;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 36: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,124,550,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,5,0,110,8,0,10,0,12,0,113,
		9,0,1,0,5,0,116,8,0,10,0,12,0,119,9,0,1,0,5,0,122,8,0,10,0,12,0,125,9,
		0,1,0,1,0,5,0,129,8,0,10,0,12,0,132,9,0,1,1,1,1,1,1,1,1,5,1,138,8,1,10,
		1,12,1,141,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
		1,5,1,5,1,5,5,5,160,8,5,10,5,12,5,163,9,5,3,5,165,8,5,1,5,1,5,1,5,1,5,
		1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,184,8,9,1,10,1,
		10,1,10,1,10,5,10,190,8,10,10,10,12,10,193,9,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,11,3,11,202,8,11,1,12,1,12,1,12,1,12,3,12,208,8,12,1,12,1,12,
		3,12,212,8,12,1,12,1,12,1,12,5,12,217,8,12,10,12,12,12,220,9,12,1,12,1,
		12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,5,15,233,8,15,10,15,12,
		15,236,9,15,1,15,1,15,1,16,1,16,5,16,242,8,16,10,16,12,16,245,9,16,1,16,
		1,16,1,17,1,17,1,17,3,17,252,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,3,18,267,8,18,1,19,1,19,1,19,1,20,1,20,1,20,
		3,20,275,8,20,1,20,1,20,1,20,1,21,3,21,281,8,21,1,21,1,21,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,3,22,292,8,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
		314,8,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,3,29,324,8,29,1,30,1,
		30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,3,
		33,341,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,5,35,353,
		8,35,10,35,12,35,356,9,35,1,36,1,36,1,36,1,36,3,36,362,8,36,1,36,1,36,
		1,36,1,36,1,36,3,36,369,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,5,36,396,8,36,10,36,12,36,399,9,36,1,37,1,37,1,37,3,37,404,
		8,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,417,8,
		38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,425,8,39,10,39,12,39,428,9,39,3,
		39,430,8,39,1,39,3,39,433,8,39,1,39,1,39,1,39,1,39,5,39,439,8,39,10,39,
		12,39,442,9,39,1,39,1,39,3,39,446,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,
		41,1,41,1,42,1,42,3,42,458,8,42,1,42,1,42,3,42,462,8,42,1,42,3,42,465,
		8,42,1,42,1,42,1,42,1,42,1,42,3,42,472,8,42,1,42,1,42,1,43,1,43,1,43,1,
		43,1,43,3,43,481,8,43,1,44,1,44,1,44,3,44,486,8,44,1,45,1,45,1,46,1,46,
		3,46,492,8,46,1,46,1,46,1,46,1,46,1,46,3,46,499,8,46,1,47,1,47,1,48,1,
		48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,3,50,513,8,50,1,50,1,50,1,50,
		5,50,518,8,50,10,50,12,50,521,9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
		3,51,530,8,51,1,51,1,51,1,51,1,51,1,52,1,52,3,52,538,8,52,1,53,1,53,1,
		53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,0,1,72,54,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		0,7,3,0,54,55,62,62,80,81,3,0,57,57,75,78,82,83,3,0,67,67,74,74,80,81,
		1,0,68,73,1,0,54,55,1,0,37,38,2,0,87,87,90,90,578,0,111,1,0,0,0,2,133,
		1,0,0,0,4,144,1,0,0,0,6,146,1,0,0,0,8,148,1,0,0,0,10,154,1,0,0,0,12,171,
		1,0,0,0,14,173,1,0,0,0,16,175,1,0,0,0,18,178,1,0,0,0,20,185,1,0,0,0,22,
		196,1,0,0,0,24,203,1,0,0,0,26,223,1,0,0,0,28,228,1,0,0,0,30,230,1,0,0,
		0,32,239,1,0,0,0,34,248,1,0,0,0,36,266,1,0,0,0,38,268,1,0,0,0,40,271,1,
		0,0,0,42,280,1,0,0,0,44,284,1,0,0,0,46,293,1,0,0,0,48,297,1,0,0,0,50,303,
		1,0,0,0,52,307,1,0,0,0,54,315,1,0,0,0,56,317,1,0,0,0,58,323,1,0,0,0,60,
		325,1,0,0,0,62,327,1,0,0,0,64,333,1,0,0,0,66,337,1,0,0,0,68,344,1,0,0,
		0,70,349,1,0,0,0,72,368,1,0,0,0,74,400,1,0,0,0,76,416,1,0,0,0,78,418,1,
		0,0,0,80,447,1,0,0,0,82,451,1,0,0,0,84,455,1,0,0,0,86,480,1,0,0,0,88,485,
		1,0,0,0,90,487,1,0,0,0,92,498,1,0,0,0,94,500,1,0,0,0,96,502,1,0,0,0,98,
		506,1,0,0,0,100,508,1,0,0,0,102,524,1,0,0,0,104,537,1,0,0,0,106,539,1,
		0,0,0,108,110,3,2,1,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,
		111,112,1,0,0,0,112,117,1,0,0,0,113,111,1,0,0,0,114,116,3,8,4,0,115,114,
		1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,123,1,0,0,
		0,119,117,1,0,0,0,120,122,3,106,53,0,121,120,1,0,0,0,122,125,1,0,0,0,123,
		121,1,0,0,0,123,124,1,0,0,0,124,130,1,0,0,0,125,123,1,0,0,0,126,129,3,
		10,5,0,127,129,3,24,12,0,128,126,1,0,0,0,128,127,1,0,0,0,129,132,1,0,0,
		0,130,128,1,0,0,0,130,131,1,0,0,0,131,1,1,0,0,0,132,130,1,0,0,0,133,134,
		5,33,0,0,134,139,3,4,2,0,135,136,5,50,0,0,136,138,3,4,2,0,137,135,1,0,
		0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,
		139,1,0,0,0,142,143,5,51,0,0,143,3,1,0,0,0,144,145,5,40,0,0,145,5,1,0,
		0,0,146,147,5,40,0,0,147,7,1,0,0,0,148,149,5,1,0,0,149,150,3,6,3,0,150,
		151,5,2,0,0,151,152,3,98,49,0,152,153,5,51,0,0,153,9,1,0,0,0,154,155,3,
		14,7,0,155,164,5,41,0,0,156,161,3,18,9,0,157,158,5,50,0,0,158,160,3,18,
		9,0,159,157,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,
		165,1,0,0,0,163,161,1,0,0,0,164,156,1,0,0,0,164,165,1,0,0,0,165,166,1,
		0,0,0,166,167,5,42,0,0,167,168,5,52,0,0,168,169,3,28,14,0,169,170,3,12,
		6,0,170,11,1,0,0,0,171,172,3,30,15,0,172,13,1,0,0,0,173,174,5,40,0,0,174,
		15,1,0,0,0,175,176,5,74,0,0,176,177,3,72,36,0,177,17,1,0,0,0,178,179,3,
		54,27,0,179,180,5,52,0,0,180,183,3,28,14,0,181,184,3,16,8,0,182,184,3,
		20,10,0,183,181,1,0,0,0,183,182,1,0,0,0,183,184,1,0,0,0,184,19,1,0,0,0,
		185,186,5,43,0,0,186,191,3,22,11,0,187,188,5,50,0,0,188,190,3,22,11,0,
		189,187,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,194,
		1,0,0,0,193,191,1,0,0,0,194,195,5,44,0,0,195,21,1,0,0,0,196,197,5,40,0,
		0,197,198,5,52,0,0,198,201,5,40,0,0,199,202,3,16,8,0,200,202,3,20,10,0,
		201,199,1,0,0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,23,1,0,0,0,203,204,
		5,5,0,0,204,207,5,40,0,0,205,206,5,11,0,0,206,208,3,28,14,0,207,205,1,
		0,0,0,207,208,1,0,0,0,208,211,1,0,0,0,209,210,5,20,0,0,210,212,3,104,52,
		0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,218,5,43,0,0,214,
		217,3,10,5,0,215,217,3,26,13,0,216,214,1,0,0,0,216,215,1,0,0,0,217,220,
		1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,
		0,221,222,5,44,0,0,222,25,1,0,0,0,223,224,5,40,0,0,224,225,5,52,0,0,225,
		226,5,40,0,0,226,227,5,51,0,0,227,27,1,0,0,0,228,229,5,40,0,0,229,29,1,
		0,0,0,230,234,5,43,0,0,231,233,3,36,18,0,232,231,1,0,0,0,233,236,1,0,0,
		0,234,232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,
		238,5,44,0,0,238,31,1,0,0,0,239,243,5,45,0,0,240,242,3,36,18,0,241,240,
		1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,
		0,245,243,1,0,0,0,246,247,5,46,0,0,247,33,1,0,0,0,248,251,3,52,26,0,249,
		250,5,49,0,0,250,252,3,72,36,0,251,249,1,0,0,0,251,252,1,0,0,0,252,253,
		1,0,0,0,253,254,5,51,0,0,254,35,1,0,0,0,255,267,3,30,15,0,256,267,3,38,
		19,0,257,267,3,44,22,0,258,267,3,48,24,0,259,267,3,50,25,0,260,267,3,40,
		20,0,261,267,3,46,23,0,262,267,3,42,21,0,263,267,3,34,17,0,264,267,3,106,
		53,0,265,267,3,102,51,0,266,255,1,0,0,0,266,256,1,0,0,0,266,257,1,0,0,
		0,266,258,1,0,0,0,266,259,1,0,0,0,266,260,1,0,0,0,266,261,1,0,0,0,266,
		262,1,0,0,0,266,263,1,0,0,0,266,264,1,0,0,0,266,265,1,0,0,0,267,37,1,0,
		0,0,268,269,3,32,16,0,269,270,5,51,0,0,270,39,1,0,0,0,271,274,3,72,36,
		0,272,275,5,49,0,0,273,275,5,56,0,0,274,272,1,0,0,0,274,273,1,0,0,0,275,
		276,1,0,0,0,276,277,3,72,36,0,277,278,5,51,0,0,278,41,1,0,0,0,279,281,
		3,72,36,0,280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,5,51,
		0,0,283,43,1,0,0,0,284,285,5,18,0,0,285,286,5,41,0,0,286,287,3,72,36,0,
		287,288,5,42,0,0,288,291,3,36,18,0,289,290,5,10,0,0,290,292,3,36,18,0,
		291,289,1,0,0,0,291,292,1,0,0,0,292,45,1,0,0,0,293,294,5,26,0,0,294,295,
		3,72,36,0,295,296,5,51,0,0,296,47,1,0,0,0,297,298,5,35,0,0,298,299,5,41,
		0,0,299,300,3,72,36,0,300,301,5,42,0,0,301,302,3,36,18,0,302,49,1,0,0,
		0,303,304,5,36,0,0,304,305,3,72,36,0,305,306,3,36,18,0,306,51,1,0,0,0,
		307,308,3,54,27,0,308,313,5,52,0,0,309,314,3,64,32,0,310,314,3,66,33,0,
		311,314,3,68,34,0,312,314,3,28,14,0,313,309,1,0,0,0,313,310,1,0,0,0,313,
		311,1,0,0,0,313,312,1,0,0,0,314,53,1,0,0,0,315,316,5,40,0,0,316,55,1,0,
		0,0,317,318,5,47,0,0,318,319,3,58,29,0,319,320,5,48,0,0,320,57,1,0,0,0,
		321,324,3,60,30,0,322,324,3,62,31,0,323,321,1,0,0,0,323,322,1,0,0,0,324,
		59,1,0,0,0,325,326,3,70,35,0,326,61,1,0,0,0,327,328,3,54,27,0,328,329,
		5,20,0,0,329,330,3,72,36,0,330,331,5,84,0,0,331,332,3,72,36,0,332,63,1,
		0,0,0,333,334,5,47,0,0,334,335,3,28,14,0,335,336,5,48,0,0,336,65,1,0,0,
		0,337,338,3,28,14,0,338,340,5,47,0,0,339,341,3,76,38,0,340,339,1,0,0,0,
		340,341,1,0,0,0,341,342,1,0,0,0,342,343,5,48,0,0,343,67,1,0,0,0,344,345,
		5,40,0,0,345,346,5,70,0,0,346,347,3,28,14,0,347,348,5,72,0,0,348,69,1,
		0,0,0,349,354,3,72,36,0,350,351,5,50,0,0,351,353,3,72,36,0,352,350,1,0,
		0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,71,1,0,0,0,356,
		354,1,0,0,0,357,358,6,36,-1,0,358,359,5,40,0,0,359,361,5,41,0,0,360,362,
		3,70,35,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,369,5,42,
		0,0,364,365,7,0,0,0,365,369,3,72,36,4,366,369,3,76,38,0,367,369,3,32,16,
		0,368,357,1,0,0,0,368,364,1,0,0,0,368,366,1,0,0,0,368,367,1,0,0,0,369,
		397,1,0,0,0,370,371,10,13,0,0,371,372,5,53,0,0,372,396,3,72,36,14,373,
		374,10,11,0,0,374,375,5,79,0,0,375,396,3,72,36,11,376,377,10,10,0,0,377,
		378,7,1,0,0,378,396,3,72,36,11,379,380,10,9,0,0,380,381,7,2,0,0,381,396,
		3,72,36,10,382,383,10,8,0,0,383,384,7,3,0,0,384,396,3,72,36,9,385,386,
		10,7,0,0,386,387,5,64,0,0,387,396,3,72,36,8,388,389,10,6,0,0,389,390,5,
		63,0,0,390,396,3,72,36,7,391,392,10,12,0,0,392,396,3,82,41,0,393,394,10,
		3,0,0,394,396,7,4,0,0,395,370,1,0,0,0,395,373,1,0,0,0,395,376,1,0,0,0,
		395,379,1,0,0,0,395,382,1,0,0,0,395,385,1,0,0,0,395,388,1,0,0,0,395,391,
		1,0,0,0,395,393,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,
		0,398,73,1,0,0,0,399,397,1,0,0,0,400,401,3,14,7,0,401,403,5,41,0,0,402,
		404,3,70,35,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,
		5,42,0,0,406,75,1,0,0,0,407,417,3,86,43,0,408,417,3,56,28,0,409,417,3,
		54,27,0,410,411,5,41,0,0,411,412,3,72,36,0,412,413,5,42,0,0,413,417,1,
		0,0,0,414,417,3,32,16,0,415,417,3,78,39,0,416,407,1,0,0,0,416,408,1,0,
		0,0,416,409,1,0,0,0,416,410,1,0,0,0,416,414,1,0,0,0,416,415,1,0,0,0,417,
		77,1,0,0,0,418,419,5,23,0,0,419,432,3,28,14,0,420,429,5,41,0,0,421,426,
		3,18,9,0,422,423,5,50,0,0,423,425,3,18,9,0,424,422,1,0,0,0,425,428,1,0,
		0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,429,
		421,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,433,5,42,0,0,432,420,1,
		0,0,0,432,433,1,0,0,0,433,445,1,0,0,0,434,435,5,43,0,0,435,440,3,80,40,
		0,436,437,5,50,0,0,437,439,3,80,40,0,438,436,1,0,0,0,439,442,1,0,0,0,440,
		438,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,444,5,
		44,0,0,444,446,1,0,0,0,445,434,1,0,0,0,445,446,1,0,0,0,446,79,1,0,0,0,
		447,448,3,54,27,0,448,449,5,49,0,0,449,450,3,72,36,0,450,81,1,0,0,0,451,
		452,5,47,0,0,452,453,3,72,36,0,453,454,5,48,0,0,454,83,1,0,0,0,455,471,
		5,47,0,0,456,458,3,72,36,0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,
		0,0,459,461,5,52,0,0,460,462,3,72,36,0,461,460,1,0,0,0,461,462,1,0,0,0,
		462,472,1,0,0,0,463,465,3,72,36,0,464,463,1,0,0,0,464,465,1,0,0,0,465,
		466,1,0,0,0,466,467,5,52,0,0,467,468,3,72,36,0,468,469,5,52,0,0,469,470,
		3,72,36,0,470,472,1,0,0,0,471,457,1,0,0,0,471,464,1,0,0,0,472,473,1,0,
		0,0,473,474,5,48,0,0,474,85,1,0,0,0,475,481,5,39,0,0,476,481,3,92,46,0,
		477,481,3,90,45,0,478,481,3,88,44,0,479,481,5,95,0,0,480,475,1,0,0,0,480,
		476,1,0,0,0,480,477,1,0,0,0,480,478,1,0,0,0,480,479,1,0,0,0,481,87,1,0,
		0,0,482,486,5,107,0,0,483,486,5,108,0,0,484,486,5,106,0,0,485,482,1,0,
		0,0,485,483,1,0,0,0,485,484,1,0,0,0,486,89,1,0,0,0,487,488,7,5,0,0,488,
		91,1,0,0,0,489,491,5,91,0,0,490,492,7,6,0,0,491,490,1,0,0,0,491,492,1,
		0,0,0,492,499,1,0,0,0,493,499,5,92,0,0,494,499,5,93,0,0,495,499,5,94,0,
		0,496,499,5,99,0,0,497,499,5,100,0,0,498,489,1,0,0,0,498,493,1,0,0,0,498,
		494,1,0,0,0,498,495,1,0,0,0,498,496,1,0,0,0,498,497,1,0,0,0,499,93,1,0,
		0,0,500,501,5,40,0,0,501,95,1,0,0,0,502,503,5,40,0,0,503,504,5,53,0,0,
		504,505,5,40,0,0,505,97,1,0,0,0,506,507,5,86,0,0,507,99,1,0,0,0,508,509,
		5,17,0,0,509,512,5,40,0,0,510,511,5,20,0,0,511,513,3,104,52,0,512,510,
		1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,5,49,0,0,515,519,5,43,
		0,0,516,518,3,40,20,0,517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,
		519,520,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,523,5,44,0,0,523,101,
		1,0,0,0,524,525,5,40,0,0,525,526,5,52,0,0,526,529,5,17,0,0,527,528,5,20,
		0,0,528,530,3,104,52,0,529,527,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,
		531,532,5,49,0,0,532,533,3,32,16,0,533,534,5,51,0,0,534,103,1,0,0,0,535,
		538,5,40,0,0,536,538,3,98,49,0,537,535,1,0,0,0,537,536,1,0,0,0,538,105,
		1,0,0,0,539,540,5,40,0,0,540,541,5,52,0,0,541,542,5,29,0,0,542,543,5,49,
		0,0,543,544,5,28,0,0,544,545,5,41,0,0,545,546,3,98,49,0,546,547,5,42,0,
		0,547,548,5,51,0,0,548,107,1,0,0,0,49,111,117,123,128,130,139,161,164,
		183,191,201,207,211,216,218,234,243,251,266,274,280,291,313,323,340,354,
		361,368,395,397,403,416,426,429,432,440,445,457,461,464,471,480,485,491,
		498,512,519,529,537
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
