//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FifthParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class FifthParser : FifthParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, BREAK=3, CASE=4, CATCH=5, CLASS=6, CONST=7, CONTINUE=8, 
		DEFAULT=9, DEFER=10, ELSE=11, EXTENDS=12, FALLTHROUGH=13, FINALLY=14, 
		FOR=15, FUNC=16, GO=17, GOTO=18, GRAPH=19, IF=20, IMPORT=21, IN=22, INTERFACE=23, 
		MAP=24, NEW=25, PACKAGE=26, RANGE=27, RETURN=28, SELECT=29, SPARQL=30, 
		STORE=31, STRUCT=32, SWITCH=33, THROW=34, TRY=35, TYPE=36, USE=37, VAR=38, 
		WHEN=39, WHILE=40, WITH=41, TRUE=42, FALSE=43, NIL_LIT=44, IDENTIFIER=45, 
		L_PAREN=46, R_PAREN=47, L_CURLY=48, R_CURLY=49, L_GRAPH=50, R_GRAPH=51, 
		L_BRACKET=52, R_BRACKET=53, ASSIGN=54, COMMA=55, SEMI=56, COLON=57, DOT=58, 
		PLUS_PLUS=59, MINUS_MINUS=60, PLUS_ASSIGN=61, STAR_STAR=62, DECLARE_ASSIGN=63, 
		ELLIPSIS=64, GEN=65, UNDERSCORE=66, LOGICAL_NOT=67, LOGICAL_OR=68, LOGICAL_AND=69, 
		LOGICAL_NAND=70, LOGICAL_NOR=71, LOGICAL_XOR=72, EQUALS=73, NOT_EQUALS=74, 
		LESS=75, LESS_OR_EQUALS=76, GREATER=77, GREATER_OR_EQUALS=78, OR=79, DIV=80, 
		MOD=81, LSHIFT=82, RSHIFT=83, POW=84, PLUS=85, MINUS=86, STAR=87, AMPERSAND=88, 
		SUCH_THAT=89, CONCAT=90, TRIPLE=91, MINUS_ASSIGN=92, IRIREF=93, SUF_SHORT=94, 
		SUF_DECIMAL=95, SUF_DOUBLE=96, SUF_LONG=97, DECIMAL_LIT=98, BINARY_LIT=99, 
		OCTAL_LIT=100, HEX_LIT=101, REAL_LITERAL=102, FLOAT_LIT=103, DECIMAL_FLOAT_LIT=104, 
		HEX_FLOAT_LIT=105, IMAGINARY_LIT=106, RUNE_LIT=107, BYTE_VALUE=108, OCTAL_BYTE_VALUE=109, 
		HEX_BYTE_VALUE=110, LITTLE_U_VALUE=111, BIG_U_VALUE=112, RAW_STRING_LIT=113, 
		INTERPRETED_STRING_LIT=114, INTERPOLATED_STRING_LIT=115, WS=116, COMMENT=117, 
		TERMINATOR=118, LINE_COMMENT=119, WS_NLSEMI=120, COMMENT_NLSEMI=121, LINE_COMMENT_NLSEMI=122, 
		EOS=123, PrefixedName=124, PNAME_LN=125, PN_LOCAL=126, PLX=127, PERCENT=128, 
		PNAME_NS=129, PN_PREFIX=130, PN_LOCAL_ESC=131, SL_COMMENT=132;
	public const int
		RULE_fifth = 0, RULE_module_import = 1, RULE_module_name = 2, RULE_packagename = 3, 
		RULE_alias = 4, RULE_function_declaration = 5, RULE_function_body = 6, 
		RULE_function_name = 7, RULE_variable_constraint = 8, RULE_paramdecl = 9, 
		RULE_destructuring_decl = 10, RULE_destructure_binding = 11, RULE_class_definition = 12, 
		RULE_property_declaration = 13, RULE_type_name = 14, RULE_block = 15, 
		RULE_graphAssertionBlock = 16, RULE_declaration = 17, RULE_statement = 18, 
		RULE_graph_assertion_statement = 19, RULE_assignment_statement = 20, RULE_expression_statement = 21, 
		RULE_if_statement = 22, RULE_return_statement = 23, RULE_while_statement = 24, 
		RULE_with_statement = 25, RULE_try_statement = 26, RULE_catch_clause = 27, 
		RULE_finally_clause = 28, RULE_throw_statement = 29, RULE_var_decl = 30, 
		RULE_var_name = 31, RULE_list = 32, RULE_list_body = 33, RULE_list_literal = 34, 
		RULE_list_comprehension = 35, RULE_type_spec = 36, RULE_expressionList = 37, 
		RULE_expression = 38, RULE_function_call_expression = 39, RULE_operand = 40, 
		RULE_tripleExpression = 41, RULE_object_instantiation_expression = 42, 
		RULE_initialiser_property_assignment = 43, RULE_index = 44, RULE_primitiveLiteral = 45, 
		RULE_tripleLiteral = 46, RULE_malformedTripleLiteral = 47, RULE_tripleObjectTerm = 48, 
		RULE_prefixedIri = 49, RULE_tripleIriRef = 50, RULE_literal = 51, RULE_string_ = 52, 
		RULE_boolean = 53, RULE_integer = 54, RULE_operandName = 55, RULE_qualifiedIdent = 56, 
		RULE_iri = 57, RULE_graphDeclaration = 58, RULE_colon_graph_decl = 59, 
		RULE_alias_scope_ref = 60, RULE_colon_store_decl = 61;
	public static readonly string[] ruleNames = {
		"fifth", "module_import", "module_name", "packagename", "alias", "function_declaration", 
		"function_body", "function_name", "variable_constraint", "paramdecl", 
		"destructuring_decl", "destructure_binding", "class_definition", "property_declaration", 
		"type_name", "block", "graphAssertionBlock", "declaration", "statement", 
		"graph_assertion_statement", "assignment_statement", "expression_statement", 
		"if_statement", "return_statement", "while_statement", "with_statement", 
		"try_statement", "catch_clause", "finally_clause", "throw_statement", 
		"var_decl", "var_name", "list", "list_body", "list_literal", "list_comprehension", 
		"type_spec", "expressionList", "expression", "function_call_expression", 
		"operand", "tripleExpression", "object_instantiation_expression", "initialiser_property_assignment", 
		"index", "primitiveLiteral", "tripleLiteral", "malformedTripleLiteral", 
		"tripleObjectTerm", "prefixedIri", "tripleIriRef", "literal", "string_", 
		"boolean", "integer", "operandName", "qualifiedIdent", "iri", "graphDeclaration", 
		"colon_graph_decl", "alias_scope_ref", "colon_store_decl"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'break'", "'case'", "'catch'", "'class'", "'const'", 
		"'continue'", "'default'", "'defer'", "'else'", "'extends'", "'fallthrough'", 
		"'finally'", "'for'", "'func'", "'go'", "'goto'", "'graph'", "'if'", "'import'", 
		"'in'", "'interface'", "'map'", "'new'", "'package'", "'range'", "'return'", 
		"'select'", "'sparql_store'", "'store'", "'struct'", "'switch'", "'throw'", 
		"'try'", "'type'", "'use'", "'var'", "'when'", "'while'", "'with'", "'true'", 
		"'false'", "'null'", null, "'('", "')'", "'{'", "'}'", "'<{'", "'}>'", 
		"'['", "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", "'+='", 
		"'**'", "':='", "'...'", "'<-'", "'_'", "'!'", "'||'", "'&&'", "'!&'", 
		"'!|'", "'~'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'|'", "'/'", 
		"'%'", "'<<'", "'>>'", "'^'", "'+'", "'-'", "'*'", "'&'", "'#'", "'<>'", 
		"'triple'", "'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "BREAK", "CASE", "CATCH", "CLASS", "CONST", "CONTINUE", 
		"DEFAULT", "DEFER", "ELSE", "EXTENDS", "FALLTHROUGH", "FINALLY", "FOR", 
		"FUNC", "GO", "GOTO", "GRAPH", "IF", "IMPORT", "IN", "INTERFACE", "MAP", 
		"NEW", "PACKAGE", "RANGE", "RETURN", "SELECT", "SPARQL", "STORE", "STRUCT", 
		"SWITCH", "THROW", "TRY", "TYPE", "USE", "VAR", "WHEN", "WHILE", "WITH", 
		"TRUE", "FALSE", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", 
		"R_CURLY", "L_GRAPH", "R_GRAPH", "L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", 
		"SEMI", "COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS", "PLUS_ASSIGN", "STAR_STAR", 
		"DECLARE_ASSIGN", "ELLIPSIS", "GEN", "UNDERSCORE", "LOGICAL_NOT", "LOGICAL_OR", 
		"LOGICAL_AND", "LOGICAL_NAND", "LOGICAL_NOR", "LOGICAL_XOR", "EQUALS", 
		"NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
		"OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "POW", "PLUS", "MINUS", "STAR", 
		"AMPERSAND", "SUCH_THAT", "CONCAT", "TRIPLE", "MINUS_ASSIGN", "IRIREF", 
		"SUF_SHORT", "SUF_DECIMAL", "SUF_DOUBLE", "SUF_LONG", "DECIMAL_LIT", "BINARY_LIT", 
		"OCTAL_LIT", "HEX_LIT", "REAL_LITERAL", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", 
		"HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", 
		"HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", 
		"INTERPOLATED_STRING_LIT", "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", 
		"WS_NLSEMI", "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "PrefixedName", 
		"PNAME_LN", "PN_LOCAL", "PLX", "PERCENT", "PNAME_NS", "PN_PREFIX", "PN_LOCAL_ESC", 
		"SL_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FifthParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FifthContext : ParserRuleContext {
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Class_definitionContext _class_definition;
		public IList<Class_definitionContext> _classes = new List<Class_definitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_store_declContext[] colon_store_decl() {
			return GetRuleContexts<Colon_store_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_store_declContext colon_store_decl(int i) {
			return GetRuleContext<Colon_store_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext[] class_definition() {
			return GetRuleContexts<Class_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext class_definition(int i) {
			return GetRuleContext<Class_definitionContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFifth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 0, RULE_fifth);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 124;
				module_import();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 130;
				alias();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 136;
					colon_store_decl();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CLASS || _la==IDENTIFIER) {
				{
				State = 144;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 142;
					_localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case CLASS:
					{
					State = 143;
					_localctx._class_definition = class_definition();
					_localctx._classes.Add(_localctx._class_definition);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext[] module_name() {
			return GetRuleContexts<Module_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name(int i) {
			return GetRuleContext<Module_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 2, RULE_module_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(USE);
			State = 150;
			module_name();
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 151;
				Match(COMMA);
				State = 152;
				module_name();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 6, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public PackagenameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(ALIAS);
			State = 165;
			_localctx.name = packagename();
			State = 166;
			Match(AS);
			State = 167;
			iri();
			State = 168;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext name;
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _args = new List<ParamdeclContext>();
		public Type_nameContext result_type;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_localctx.name = function_name();
			State = 171;
			Match(L_PAREN);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 172;
				_localctx._paramdecl = paramdecl();
				_localctx._args.Add(_localctx._paramdecl);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 173;
					Match(COMMA);
					State = 174;
					_localctx._paramdecl = paramdecl();
					_localctx._args.Add(_localctx._paramdecl);
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 182;
			Match(R_PAREN);
			State = 183;
			Match(COLON);
			State = 184;
			_localctx.result_type = type_name();
			State = 185;
			_localctx.body = function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_constraintContext : ParserRuleContext {
		public ExpressionContext constraint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FifthParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVariable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVariable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_constraintContext variable_constraint() {
		Variable_constraintContext _localctx = new Variable_constraintContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(OR);
			State = 192;
			_localctx.constraint = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamdeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public ParamdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramdecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterParamdecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitParamdecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamdeclContext paramdecl() {
		ParamdeclContext _localctx = new ParamdeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_paramdecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			var_name();
			State = 195;
			Match(COLON);
			State = 196;
			type_name();
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				{
				State = 197;
				variable_constraint();
				}
				break;
			case L_CURLY:
				{
				State = 198;
				destructuring_decl();
				}
				break;
			case R_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructuring_declContext : ParserRuleContext {
		public Destructure_bindingContext _destructure_binding;
		public IList<Destructure_bindingContext> _bindings = new List<Destructure_bindingContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Destructure_bindingContext[] destructure_binding() {
			return GetRuleContexts<Destructure_bindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructure_bindingContext destructure_binding(int i) {
			return GetRuleContext<Destructure_bindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Destructuring_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructuring_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDestructuring_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDestructuring_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructuring_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructuring_declContext destructuring_decl() {
		Destructuring_declContext _localctx = new Destructuring_declContext(Context, State);
		EnterRule(_localctx, 20, RULE_destructuring_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(L_CURLY);
			State = 202;
			_localctx._destructure_binding = destructure_binding();
			_localctx._bindings.Add(_localctx._destructure_binding);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 203;
				Match(COMMA);
				State = 204;
				_localctx._destructure_binding = destructure_binding();
				_localctx._bindings.Add(_localctx._destructure_binding);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructure_bindingContext : ParserRuleContext {
		public IToken name;
		public IToken propname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public Destructure_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructure_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDestructure_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDestructure_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructure_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructure_bindingContext destructure_binding() {
		Destructure_bindingContext _localctx = new Destructure_bindingContext(Context, State);
		EnterRule(_localctx, 22, RULE_destructure_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_localctx.name = Match(IDENTIFIER);
			State = 213;
			Match(COLON);
			State = 214;
			_localctx.propname = Match(IDENTIFIER);
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				{
				State = 215;
				variable_constraint();
				}
				break;
			case L_CURLY:
				{
				State = 216;
				destructuring_decl();
				}
				break;
			case R_CURLY:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public IToken name;
		public Type_nameContext superClass;
		public Alias_scope_refContext aliasScope;
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Property_declarationContext _property_declaration;
		public IList<Property_declarationContext> _properties = new List<Property_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FifthParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(FifthParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_scope_refContext alias_scope_ref() {
			return GetRuleContext<Alias_scope_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext[] property_declaration() {
			return GetRuleContexts<Property_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext property_declaration(int i) {
			return GetRuleContext<Property_declarationContext>(i);
		}
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(CLASS);
			State = 220;
			_localctx.name = Match(IDENTIFIER);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 221;
				Match(EXTENDS);
				State = 222;
				_localctx.superClass = type_name();
				}
			}

			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 225;
				Match(IN);
				State = 226;
				_localctx.aliasScope = alias_scope_ref();
				}
			}

			State = 229;
			Match(L_CURLY);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				State = 232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 230;
					_localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case 2:
					{
					State = 231;
					_localctx._property_declaration = property_declaration();
					_localctx._properties.Add(_localctx._property_declaration);
					}
					break;
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public IToken name;
		public Type_specContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_property_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_localctx.name = Match(IDENTIFIER);
			State = 240;
			Match(COLON);
			State = 241;
			_localctx.type = type_spec(0);
			State = 242;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(L_CURLY);
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 247;
					statement();
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 253;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphAssertionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_GRAPH() { return GetToken(FifthParser.L_GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_GRAPH() { return GetToken(FifthParser.R_GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GraphAssertionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphAssertionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGraphAssertionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGraphAssertionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphAssertionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphAssertionBlockContext graphAssertionBlock() {
		GraphAssertionBlockContext _localctx = new GraphAssertionBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_graphAssertionBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(L_GRAPH);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 256;
					statement();
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 262;
			Match(R_GRAPH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Var_declContext decl;
		public ExpressionContext init;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx.decl = var_decl();
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 265;
				Match(ASSIGN);
				State = 266;
				_localctx.init = expression(0);
				}
			}

			State = 269;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Graph_assertion_statementContext graph_assertion_statement() {
			return GetRuleContext<Graph_assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_statementContext with_statement() {
			return GetRuleContext<With_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_store_declContext colon_store_decl() {
			return GetRuleContext<Colon_store_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Colon_graph_declContext colon_graph_decl() {
			return GetRuleContext<Colon_graph_declContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				graph_assertion_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 273;
				if_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 274;
				while_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 275;
				with_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 276;
				try_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 277;
				throw_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 278;
				assignment_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 279;
				return_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 280;
				expression_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 281;
				declaration();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 282;
				colon_store_decl();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 283;
				colon_graph_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Graph_assertion_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GraphAssertionBlockContext graphAssertionBlock() {
			return GetRuleContext<GraphAssertionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		public Graph_assertion_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graph_assertion_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGraph_assertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGraph_assertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraph_assertion_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Graph_assertion_statementContext graph_assertion_statement() {
		Graph_assertion_statementContext _localctx = new Graph_assertion_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_graph_assertion_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			graphAssertionBlock();
			State = 287;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(FifthParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(FifthParser.MINUS_ASSIGN, 0); }
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAssignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAssignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_localctx.lvalue = expression(0);
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 290;
				_localctx.op = Match(ASSIGN);
				}
				break;
			case PLUS_ASSIGN:
				{
				State = 291;
				_localctx.op = Match(PLUS_ASSIGN);
				}
				break;
			case MINUS_ASSIGN:
				{
				State = 292;
				_localctx.op = Match(MINUS_ASSIGN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 295;
			_localctx.rvalue = expression(0);
			State = 296;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 298;
				expression(0);
				}
				break;
			}
			State = 301;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext ifpart;
		public StatementContext elsepart;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(IF);
			State = 304;
			Match(L_PAREN);
			State = 305;
			_localctx.condition = expression(0);
			State = 306;
			Match(R_PAREN);
			State = 307;
			_localctx.ifpart = statement();
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 308;
				Match(ELSE);
				State = 309;
				_localctx.elsepart = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(FifthParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(RETURN);
			State = 313;
			expression(0);
			State = 314;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext looppart;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(FifthParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(WHILE);
			State = 317;
			Match(L_PAREN);
			State = 318;
			_localctx.condition = expression(0);
			State = 319;
			Match(R_PAREN);
			State = 320;
			_localctx.looppart = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public With_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterWith_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitWith_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_statementContext with_statement() {
		With_statementContext _localctx = new With_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_with_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(WITH);
			State = 323;
			expression(0);
			State = 324;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public BlockContext tryBlock;
		public Catch_clauseContext _catch_clause;
		public IList<Catch_clauseContext> _catchClauses = new List<Catch_clauseContext>();
		public Finally_clauseContext finallyBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(FifthParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_clauseContext[] catch_clause() {
			return GetRuleContexts<Catch_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_clauseContext catch_clause(int i) {
			return GetRuleContext<Catch_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_try_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(TRY);
			State = 327;
			_localctx.tryBlock = block();
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 328;
					_localctx._catch_clause = catch_clause();
					_localctx._catchClauses.Add(_localctx._catch_clause);
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 334;
				_localctx.finallyBlock = finally_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clauseContext : ParserRuleContext {
		public Var_nameContext exceptionId;
		public Type_specContext exceptionType;
		public ExpressionContext filter;
		public BlockContext catchBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(FifthParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] L_PAREN() { return GetTokens(FifthParser.L_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN(int i) {
			return GetToken(FifthParser.L_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] R_PAREN() { return GetTokens(FifthParser.R_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN(int i) {
			return GetToken(FifthParser.R_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(FifthParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterCatch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitCatch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clauseContext catch_clause() {
		Catch_clauseContext _localctx = new Catch_clauseContext(Context, State);
		EnterRule(_localctx, 54, RULE_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(CATCH);
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_PAREN:
				{
				State = 338;
				Match(L_PAREN);
				State = 344;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 339;
					_localctx.exceptionId = var_name();
					State = 340;
					Match(COLON);
					State = 341;
					_localctx.exceptionType = type_spec(0);
					}
					break;
				case 2:
					{
					State = 343;
					_localctx.exceptionType = type_spec(0);
					}
					break;
				}
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 346;
					Match(WHEN);
					State = 347;
					Match(L_PAREN);
					State = 348;
					_localctx.filter = expression(0);
					State = 349;
					Match(R_PAREN);
					}
				}

				State = 353;
				Match(R_PAREN);
				}
				break;
			case L_CURLY:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 358;
			_localctx.catchBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public BlockContext finallyBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(FifthParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(Context, State);
		EnterRule(_localctx, 56, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(FINALLY);
			State = 361;
			_localctx.finallyBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(FifthParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(THROW);
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 364;
				expression(0);
				}
				break;
			}
			State = 367;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 60, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			var_name();
			State = 370;
			Match(COLON);
			State = 371;
			type_spec(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 62, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_bodyContext list_body() {
			return GetRuleContext<List_bodyContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 64, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(L_BRACKET);
			State = 376;
			_localctx.body = list_body();
			State = 377;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_comprehensionContext list_comprehension() {
			return GetRuleContext<List_comprehensionContext>(0);
		}
		public List_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_bodyContext list_body() {
		List_bodyContext _localctx = new List_bodyContext(Context, State);
		EnterRule(_localctx, 66, RULE_list_body);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				list_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380;
				list_comprehension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 68, RULE_list_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 383;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_comprehensionContext : ParserRuleContext {
		public Var_nameContext varname;
		public ExpressionContext source;
		public ExpressionContext constraint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCH_THAT() { return GetToken(FifthParser.SUCH_THAT, 0); }
		public List_comprehensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_comprehension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_comprehension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_comprehension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_comprehension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_comprehensionContext list_comprehension() {
		List_comprehensionContext _localctx = new List_comprehensionContext(Context, State);
		EnterRule(_localctx, 70, RULE_list_comprehension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_localctx.varname = var_name();
			State = 387;
			Match(IN);
			State = 388;
			_localctx.source = expression(0);
			{
			State = 389;
			Match(SUCH_THAT);
			State = 390;
			_localctx.constraint = expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specContext : ParserRuleContext {
		public Type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_spec; } }
	 
		public Type_specContext() { }
		public virtual void CopyFrom(Type_specContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Generic_type_specContext : Type_specContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		public Generic_type_specContext(Type_specContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGeneric_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGeneric_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_type_specContext : Type_specContext {
		public OperandContext size;
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Array_type_specContext(Type_specContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterArray_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitArray_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Base_type_specContext : Type_specContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Base_type_specContext(Type_specContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBase_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBase_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class List_type_specContext : Type_specContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		public List_type_specContext(Type_specContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterList_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitList_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specContext type_spec() {
		return type_spec(0);
	}

	private Type_specContext type_spec(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_specContext _localctx = new Type_specContext(Context, _parentState);
		Type_specContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_type_spec, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				_localctx = new List_type_specContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 393;
				Match(L_BRACKET);
				State = 394;
				type_spec(0);
				State = 395;
				Match(R_BRACKET);
				}
				break;
			case 2:
				{
				_localctx = new Generic_type_specContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 397;
				Match(IDENTIFIER);
				State = 398;
				Match(LESS);
				State = 399;
				type_spec(0);
				State = 400;
				Match(GREATER);
				}
				break;
			case 3:
				{
				_localctx = new Base_type_specContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 402;
				Match(IDENTIFIER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 413;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_type_specContext(new Type_specContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_type_spec);
					State = 405;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 406;
					Match(L_BRACKET);
					State = 408;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 407;
						((Array_type_specContext)_localctx).size = operand();
						}
						break;
					}
					State = 410;
					Match(R_BRACKET);
					}
					} 
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 74, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_localctx._expression = expression(0);
			_localctx._expressions.Add(_localctx._expression);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 417;
				Match(COMMA);
				State = 418;
				_localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Exp_andContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(FifthParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_andContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_and(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_relContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken rel_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(FifthParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(FifthParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(FifthParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(FifthParser.GREATER_OR_EQUALS, 0); }
		public Exp_relContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_rel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_rel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_rel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_unaryContext : ExpressionContext {
		public IToken unary_op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_NOT() { return GetToken(FifthParser.LOGICAL_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(FifthParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(FifthParser.MINUS_MINUS, 0); }
		public Exp_unaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_unary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_expContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(FifthParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_expContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_member_accessContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FifthParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_member_accessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_member_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_member_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_member_access(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_orContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(FifthParser.LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Exp_orContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_addContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken add_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FifthParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_XOR() { return GetToken(FifthParser.LOGICAL_XOR, 0); }
		public Exp_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_indexContext : ExpressionContext {
		public ExpressionContext lhs;
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Exp_indexContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_index(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_mulContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken mul_op;
		public ExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(FifthParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(FifthParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(FifthParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(FifthParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(FifthParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(FifthParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR_STAR() { return GetToken(FifthParser.STAR_STAR, 0); }
		public Exp_mulContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_mul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_throwContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(FifthParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Exp_throwContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_throw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_throw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_throw(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_operandContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Exp_operandContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_operand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_unary_postfixContext : ExpressionContext {
		public IToken unary_op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(FifthParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(FifthParser.MINUS_MINUS, 0); }
		public Exp_unary_postfixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_unary_postfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_unary_postfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_unary_postfix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_funccallContext : ExpressionContext {
		public IToken funcname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Exp_funccallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_funccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_funccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_funccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				_localctx = new Exp_funccallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 425;
				((Exp_funccallContext)_localctx).funcname = Match(IDENTIFIER);
				State = 426;
				Match(L_PAREN);
				State = 428;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 427;
					expressionList();
					}
					break;
				}
				State = 430;
				Match(R_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new Exp_unaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 431;
				((Exp_unaryContext)_localctx).unary_op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 201326851L) != 0)) ) {
					((Exp_unaryContext)_localctx).unary_op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 432;
				expression(9);
				}
				break;
			case 3:
				{
				_localctx = new Exp_throwContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 433;
				Match(THROW);
				State = 434;
				expression(8);
				}
				break;
			case 4:
				{
				_localctx = new Exp_operandContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 435;
				operand();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 465;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 463;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new Exp_member_accessContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_member_accessContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 438;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 439;
						Match(DOT);
						State = 440;
						((Exp_member_accessContext)_localctx).rhs = expression(14);
						}
						break;
					case 2:
						{
						_localctx = new Exp_expContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_expContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 441;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 442;
						Match(POW);
						State = 443;
						((Exp_expContext)_localctx).rhs = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new Exp_mulContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_mulContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 444;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 445;
						((Exp_mulContext)_localctx).mul_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 104595457L) != 0)) ) {
							((Exp_mulContext)_localctx).mul_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 446;
						((Exp_mulContext)_localctx).rhs = expression(7);
						}
						break;
					case 4:
						{
						_localctx = new Exp_addContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_addContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 447;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 448;
						((Exp_addContext)_localctx).add_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 24705L) != 0)) ) {
							((Exp_addContext)_localctx).add_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 449;
						((Exp_addContext)_localctx).rhs = expression(6);
						}
						break;
					case 5:
						{
						_localctx = new Exp_relContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_relContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 450;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 451;
						((Exp_relContext)_localctx).rel_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 63L) != 0)) ) {
							((Exp_relContext)_localctx).rel_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 452;
						((Exp_relContext)_localctx).rhs = expression(5);
						}
						break;
					case 6:
						{
						_localctx = new Exp_andContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_andContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 453;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 454;
						Match(LOGICAL_AND);
						State = 455;
						((Exp_andContext)_localctx).rhs = expression(4);
						}
						break;
					case 7:
						{
						_localctx = new Exp_orContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_orContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 456;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 457;
						Match(LOGICAL_OR);
						State = 458;
						((Exp_orContext)_localctx).rhs = expression(3);
						}
						break;
					case 8:
						{
						_localctx = new Exp_indexContext(new ExpressionContext(_parentctx, _parentState));
						((Exp_indexContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 459;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 460;
						index();
						}
						break;
					case 9:
						{
						_localctx = new Exp_unary_postfixContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 461;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 462;
						((Exp_unary_postfixContext)_localctx).unary_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
							((Exp_unary_postfixContext)_localctx).unary_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 467;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_expressionContext : ParserRuleContext {
		public Function_nameContext un;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Function_call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_expressionContext function_call_expression() {
		Function_call_expressionContext _localctx = new Function_call_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_function_call_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			_localctx.un = function_name();
			State = 469;
			Match(L_PAREN);
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 470;
				expressionList();
				}
				break;
			}
			State = 473;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TripleExpressionContext tripleExpression() {
			return GetRuleContext<TripleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphAssertionBlockContext graphAssertionBlock() {
			return GetRuleContext<GraphAssertionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_instantiation_expressionContext object_instantiation_expression() {
			return GetRuleContext<Object_instantiation_expressionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 80, RULE_operand);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				tripleExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				var_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 479;
				Match(L_PAREN);
				State = 480;
				expression(0);
				State = 481;
				Match(R_PAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 483;
				graphAssertionBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 484;
				object_instantiation_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TripleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TripleLiteralContext tripleLiteral() {
			return GetRuleContext<TripleLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MalformedTripleLiteralContext malformedTripleLiteral() {
			return GetRuleContext<MalformedTripleLiteralContext>(0);
		}
		public TripleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tripleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTripleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTripleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTripleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TripleExpressionContext tripleExpression() {
		TripleExpressionContext _localctx = new TripleExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_tripleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			if (!( InputStream.LA(1) == LESS && InputStream.LA(2) == IDENTIFIER && (InputStream.LA(3) == COMMA || InputStream.LA(3) == COLON)
					)) throw new FailedPredicateException(this, " InputStream.LA(1) == LESS && InputStream.LA(2) == IDENTIFIER && (InputStream.LA(3) == COMMA || InputStream.LA(3) == COLON)\n\t\t");
			State = 490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 488;
				tripleLiteral();
				}
				break;
			case 2:
				{
				State = 489;
				malformedTripleLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_instantiation_expressionContext : ParserRuleContext {
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _args = new List<ParamdeclContext>();
		public Initialiser_property_assignmentContext _initialiser_property_assignment;
		public IList<Initialiser_property_assignmentContext> _properties = new List<Initialiser_property_assignmentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initialiser_property_assignmentContext[] initialiser_property_assignment() {
			return GetRuleContexts<Initialiser_property_assignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initialiser_property_assignmentContext initialiser_property_assignment(int i) {
			return GetRuleContext<Initialiser_property_assignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		public Object_instantiation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_instantiation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterObject_instantiation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitObject_instantiation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_instantiation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_instantiation_expressionContext object_instantiation_expression() {
		Object_instantiation_expressionContext _localctx = new Object_instantiation_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_object_instantiation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(NEW);
			State = 493;
			type_spec(0);
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 494;
				Match(L_PAREN);
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 495;
					_localctx._paramdecl = paramdecl();
					_localctx._args.Add(_localctx._paramdecl);
					State = 500;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 496;
						Match(COMMA);
						State = 497;
						_localctx._paramdecl = paramdecl();
						_localctx._args.Add(_localctx._paramdecl);
						}
						}
						State = 502;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 505;
				Match(R_PAREN);
				}
				break;
			}
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 508;
				Match(L_CURLY);
				State = 509;
				_localctx._initialiser_property_assignment = initialiser_property_assignment();
				_localctx._properties.Add(_localctx._initialiser_property_assignment);
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 510;
					Match(COMMA);
					State = 511;
					_localctx._initialiser_property_assignment = initialiser_property_assignment();
					_localctx._properties.Add(_localctx._initialiser_property_assignment);
					}
					}
					State = 516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 517;
				Match(R_CURLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initialiser_property_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Initialiser_property_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialiser_property_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterInitialiser_property_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitInitialiser_property_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialiser_property_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initialiser_property_assignmentContext initialiser_property_assignment() {
		Initialiser_property_assignmentContext _localctx = new Initialiser_property_assignmentContext(Context, State);
		EnterRule(_localctx, 86, RULE_initialiser_property_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			var_name();
			State = 522;
			Match(ASSIGN);
			State = 523;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(FifthParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(FifthParser.R_BRACKET, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 88, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(L_BRACKET);
			State = 526;
			expression(0);
			State = 527;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveLiteralContext : ParserRuleContext {
		public PrimitiveLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveLiteral; } }
	 
		public PrimitiveLiteralContext() { }
		public virtual void CopyFrom(PrimitiveLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Lit_stringContext : PrimitiveLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public Lit_stringContext(PrimitiveLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_nilContext : PrimitiveLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT() { return GetToken(FifthParser.NIL_LIT, 0); }
		public Lit_nilContext(PrimitiveLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_nil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_intContext : PrimitiveLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Lit_intContext(PrimitiveLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_boolContext : PrimitiveLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Lit_boolContext(PrimitiveLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lit_floatContext : PrimitiveLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(FifthParser.REAL_LITERAL, 0); }
		public Lit_floatContext(PrimitiveLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLit_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLit_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveLiteralContext primitiveLiteral() {
		PrimitiveLiteralContext _localctx = new PrimitiveLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_primitiveLiteral);
		try {
			State = 534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
				_localctx = new Lit_nilContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				Match(NIL_LIT);
				}
				break;
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
				_localctx = new Lit_intContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				integer();
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new Lit_boolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 531;
				boolean();
				}
				break;
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
			case INTERPOLATED_STRING_LIT:
				_localctx = new Lit_stringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 532;
				string_();
				}
				break;
			case REAL_LITERAL:
				_localctx = new Lit_floatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 533;
				Match(REAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TripleLiteralContext : ParserRuleContext {
		public TripleLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tripleLiteral; } }
	 
		public TripleLiteralContext() { }
		public virtual void CopyFrom(TripleLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Triple_literalContext : TripleLiteralContext {
		public TripleIriRefContext tripleSubject;
		public TripleIriRefContext triplePredicate;
		public TripleObjectTermContext tripleObject;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext[] tripleIriRef() {
			return GetRuleContexts<TripleIriRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext tripleIriRef(int i) {
			return GetRuleContext<TripleIriRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripleObjectTermContext tripleObjectTerm() {
			return GetRuleContext<TripleObjectTermContext>(0);
		}
		public Triple_literalContext(TripleLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTriple_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTriple_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriple_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TripleLiteralContext tripleLiteral() {
		TripleLiteralContext _localctx = new TripleLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_tripleLiteral);
		try {
			_localctx = new Triple_literalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(LESS);
			State = 537;
			((Triple_literalContext)_localctx).tripleSubject = tripleIriRef();
			State = 538;
			Match(COMMA);
			State = 539;
			((Triple_literalContext)_localctx).triplePredicate = tripleIriRef();
			State = 540;
			Match(COMMA);
			State = 541;
			((Triple_literalContext)_localctx).tripleObject = tripleObjectTerm();
			State = 542;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MalformedTripleLiteralContext : ParserRuleContext {
		public MalformedTripleLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_malformedTripleLiteral; } }
	 
		public MalformedTripleLiteralContext() { }
		public virtual void CopyFrom(MalformedTripleLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Triple_malformed_missingObjectContext : MalformedTripleLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext[] tripleIriRef() {
			return GetRuleContexts<TripleIriRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext tripleIriRef(int i) {
			return GetRuleContext<TripleIriRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FifthParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		public Triple_malformed_missingObjectContext(MalformedTripleLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTriple_malformed_missingObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTriple_malformed_missingObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriple_malformed_missingObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Triple_malformed_tooManyContext : MalformedTripleLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext[] tripleIriRef() {
			return GetRuleContexts<TripleIriRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext tripleIriRef(int i) {
			return GetRuleContext<TripleIriRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		public Triple_malformed_tooManyContext(MalformedTripleLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTriple_malformed_tooMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTriple_malformed_tooMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriple_malformed_tooMany(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Triple_malformed_trailingCommaContext : MalformedTripleLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FifthParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext[] tripleIriRef() {
			return GetRuleContexts<TripleIriRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext tripleIriRef(int i) {
			return GetRuleContext<TripleIriRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripleObjectTermContext tripleObjectTerm() {
			return GetRuleContext<TripleObjectTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FifthParser.GREATER, 0); }
		public Triple_malformed_trailingCommaContext(MalformedTripleLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTriple_malformed_trailingComma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTriple_malformed_trailingComma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriple_malformed_trailingComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MalformedTripleLiteralContext malformedTripleLiteral() {
		MalformedTripleLiteralContext _localctx = new MalformedTripleLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_malformedTripleLiteral);
		int _la;
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				_localctx = new Triple_malformed_missingObjectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				Match(LESS);
				State = 545;
				tripleIriRef();
				State = 546;
				Match(COMMA);
				State = 547;
				tripleIriRef();
				State = 548;
				Match(GREATER);
				}
				break;
			case 2:
				_localctx = new Triple_malformed_trailingCommaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 550;
				Match(LESS);
				State = 551;
				tripleIriRef();
				State = 552;
				Match(COMMA);
				State = 553;
				tripleIriRef();
				State = 554;
				Match(COMMA);
				State = 555;
				tripleObjectTerm();
				State = 556;
				Match(COMMA);
				State = 557;
				Match(GREATER);
				}
				break;
			case 3:
				_localctx = new Triple_malformed_tooManyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 559;
				Match(LESS);
				State = 560;
				tripleIriRef();
				State = 561;
				Match(COMMA);
				State = 562;
				tripleIriRef();
				State = 563;
				Match(COMMA);
				State = 564;
				tripleIriRef();
				State = 565;
				Match(COMMA);
				State = 566;
				tripleIriRef();
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 567;
					Match(COMMA);
					State = 568;
					tripleIriRef();
					}
					}
					State = 573;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 574;
				Match(GREATER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TripleObjectTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TripleIriRefContext tripleIriRef() {
			return GetRuleContext<TripleIriRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveLiteralContext primitiveLiteral() {
			return GetRuleContext<PrimitiveLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public TripleObjectTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tripleObjectTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTripleObjectTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTripleObjectTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTripleObjectTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TripleObjectTermContext tripleObjectTerm() {
		TripleObjectTermContext _localctx = new TripleObjectTermContext(Context, State);
		EnterRule(_localctx, 96, RULE_tripleObjectTerm);
		try {
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				tripleIriRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				primitiveLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 580;
				list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixedIriContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public PrefixedIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixedIri; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterPrefixedIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitPrefixedIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixedIriContext prefixedIri() {
		PrefixedIriContext _localctx = new PrefixedIriContext(Context, State);
		EnterRule(_localctx, 98, RULE_prefixedIri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(IDENTIFIER);
			State = 584;
			Match(COLON);
			State = 585;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TripleIriRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixedIriContext prefixedIri() {
			return GetRuleContext<PrefixedIriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TripleIriRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tripleIriRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterTripleIriRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitTripleIriRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTripleIriRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TripleIriRefContext tripleIriRef() {
		TripleIriRefContext _localctx = new TripleIriRefContext(Context, State);
		EnterRule(_localctx, 100, RULE_tripleIriRef);
		try {
			State = 589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				prefixedIri();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveLiteralContext primitiveLiteral() {
			return GetRuleContext<PrimitiveLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			primitiveLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_Context : ParserRuleContext {
		public String_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_; } }
	 
		public String_Context() { }
		public virtual void CopyFrom(String_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Str_rawContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LIT() { return GetToken(FifthParser.RAW_STRING_LIT, 0); }
		public Str_rawContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_raw(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Str_plainContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPRETED_STRING_LIT() { return GetToken(FifthParser.INTERPRETED_STRING_LIT, 0); }
		public Str_plainContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_plain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_plain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_plain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Str_interpolatedContext : String_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_STRING_LIT() { return GetToken(FifthParser.INTERPOLATED_STRING_LIT, 0); }
		public Str_interpolatedContext(String_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStr_interpolated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStr_interpolated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr_interpolated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_Context string_() {
		String_Context _localctx = new String_Context(Context, State);
		EnterRule(_localctx, 104, RULE_string_);
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPRETED_STRING_LIT:
				_localctx = new Str_plainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 593;
				Match(INTERPRETED_STRING_LIT);
				}
				break;
			case INTERPOLATED_STRING_LIT:
				_localctx = new Str_interpolatedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 594;
				Match(INTERPOLATED_STRING_LIT);
				}
				break;
			case RAW_STRING_LIT:
				_localctx = new Str_rawContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 595;
				Match(RAW_STRING_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(FifthParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(FifthParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 106, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	 
		public IntegerContext() { }
		public virtual void CopyFrom(IntegerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Num_binaryContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LIT() { return GetToken(FifthParser.BINARY_LIT, 0); }
		public Num_binaryContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_binary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_hexContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(FifthParser.HEX_LIT, 0); }
		public Num_hexContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_hex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_runeContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(FifthParser.RUNE_LIT, 0); }
		public Num_runeContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_rune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_rune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_rune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_imaginaryContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGINARY_LIT() { return GetToken(FifthParser.IMAGINARY_LIT, 0); }
		public Num_imaginaryContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_imaginary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_imaginary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_imaginary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_decimalContext : IntegerContext {
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LIT() { return GetToken(FifthParser.DECIMAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUF_SHORT() { return GetToken(FifthParser.SUF_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUF_LONG() { return GetToken(FifthParser.SUF_LONG, 0); }
		public Num_decimalContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_decimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_octalContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LIT() { return GetToken(FifthParser.OCTAL_LIT, 0); }
		public Num_octalContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterNum_octal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitNum_octal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_octal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 108, RULE_integer);
		int _la;
		try {
			State = 609;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LIT:
				_localctx = new Num_decimalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 600;
				Match(DECIMAL_LIT);
				State = 602;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 601;
					((Num_decimalContext)_localctx).suffix = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==SUF_SHORT || _la==SUF_LONG) ) {
						((Num_decimalContext)_localctx).suffix = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BINARY_LIT:
				_localctx = new Num_binaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				Match(BINARY_LIT);
				}
				break;
			case OCTAL_LIT:
				_localctx = new Num_octalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 605;
				Match(OCTAL_LIT);
				}
				break;
			case HEX_LIT:
				_localctx = new Num_hexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 606;
				Match(HEX_LIT);
				}
				break;
			case IMAGINARY_LIT:
				_localctx = new Num_imaginaryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 607;
				Match(IMAGINARY_LIT);
				}
				break;
			case RUNE_LIT:
				_localctx = new Num_runeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 608;
				Match(RUNE_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_operandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FifthParser.DOT, 0); }
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 112, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(IDENTIFIER);
			State = 614;
			Match(DOT);
			State = 615;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRIREF() { return GetToken(FifthParser.IRIREF, 0); }
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(Context, State);
		EnterRule(_localctx, 114, RULE_iri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(IRIREF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphDeclarationContext : ParserRuleContext {
		public IToken name;
		public Alias_scope_refContext aliasScope;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(FifthParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(FifthParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(FifthParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext[] assignment_statement() {
			return GetRuleContexts<Assignment_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext assignment_statement(int i) {
			return GetRuleContext<Assignment_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_scope_refContext alias_scope_ref() {
			return GetRuleContext<Alias_scope_refContext>(0);
		}
		public GraphDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterGraphDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitGraphDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphDeclarationContext graphDeclaration() {
		GraphDeclarationContext _localctx = new GraphDeclarationContext(Context, State);
		EnterRule(_localctx, 116, RULE_graphDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(GRAPH);
			State = 620;
			_localctx.name = Match(IDENTIFIER);
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 621;
				Match(IN);
				State = 622;
				_localctx.aliasScope = alias_scope_ref();
				}
			}

			State = 625;
			Match(ASSIGN);
			State = 626;
			Match(L_CURLY);
			State = 630;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 627;
					assignment_statement();
					}
					} 
				}
				State = 632;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 633;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_graph_declContext : ParserRuleContext {
		public IToken name;
		public Alias_scope_refContext aliasScope;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(FifthParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FifthParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_scope_refContext alias_scope_ref() {
			return GetRuleContext<Alias_scope_refContext>(0);
		}
		public Colon_graph_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_graph_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterColon_graph_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitColon_graph_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_graph_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_graph_declContext colon_graph_decl() {
		Colon_graph_declContext _localctx = new Colon_graph_declContext(Context, State);
		EnterRule(_localctx, 118, RULE_colon_graph_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			_localctx.name = Match(IDENTIFIER);
			State = 636;
			Match(COLON);
			State = 637;
			Match(GRAPH);
			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 638;
				Match(IN);
				State = 639;
				_localctx.aliasScope = alias_scope_ref();
				}
			}

			State = 642;
			Match(ASSIGN);
			State = 643;
			expression(0);
			State = 644;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_scope_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public Alias_scope_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_scope_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAlias_scope_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAlias_scope_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_scope_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_scope_refContext alias_scope_ref() {
		Alias_scope_refContext _localctx = new Alias_scope_refContext(Context, State);
		EnterRule(_localctx, 120, RULE_alias_scope_ref);
		try {
			State = 648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646;
				Match(IDENTIFIER);
				}
				break;
			case IRIREF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 647;
				iri();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_store_declContext : ParserRuleContext {
		public IToken store_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORE() { return GetToken(FifthParser.STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPARQL() { return GetToken(FifthParser.SPARQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(FifthParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(FifthParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(FifthParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Colon_store_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_store_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterColon_store_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitColon_store_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthParserVisitor<TResult> typedVisitor = visitor as IFifthParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_store_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_store_declContext colon_store_decl() {
		Colon_store_declContext _localctx = new Colon_store_declContext(Context, State);
		EnterRule(_localctx, 122, RULE_colon_store_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			_localctx.store_name = Match(IDENTIFIER);
			State = 651;
			Match(COLON);
			State = 652;
			Match(STORE);
			State = 653;
			Match(ASSIGN);
			State = 654;
			Match(SPARQL);
			State = 655;
			Match(L_PAREN);
			State = 656;
			iri();
			State = 657;
			Match(R_PAREN);
			State = 658;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 36: return type_spec_sempred((Type_specContext)_localctx, predIndex);
		case 38: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 41: return tripleExpression_sempred((TripleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_spec_sempred(Type_specContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 10);
		}
		return true;
	}
	private bool tripleExpression_sempred(TripleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return  InputStream.LA(1) == LESS && InputStream.LA(2) == IDENTIFIER && (InputStream.LA(3) == COMMA || InputStream.LA(3) == COLON)
				;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,132,661,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,5,0,126,8,0,10,0,
		12,0,129,9,0,1,0,5,0,132,8,0,10,0,12,0,135,9,0,1,0,5,0,138,8,0,10,0,12,
		0,141,9,0,1,0,1,0,5,0,145,8,0,10,0,12,0,148,9,0,1,1,1,1,1,1,1,1,5,1,154,
		8,1,10,1,12,1,157,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,5,1,5,1,5,1,5,1,5,5,5,176,8,5,10,5,12,5,179,9,5,3,5,181,8,5,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,200,8,
		9,1,10,1,10,1,10,1,10,5,10,206,8,10,10,10,12,10,209,9,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,3,11,218,8,11,1,12,1,12,1,12,1,12,3,12,224,8,12,1,
		12,1,12,3,12,228,8,12,1,12,1,12,1,12,5,12,233,8,12,10,12,12,12,236,9,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,5,15,249,8,15,10,
		15,12,15,252,9,15,1,15,1,15,1,16,1,16,5,16,258,8,16,10,16,12,16,261,9,
		16,1,16,1,16,1,17,1,17,1,17,3,17,268,8,17,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,285,8,18,1,19,1,19,1,
		19,1,20,1,20,1,20,1,20,3,20,294,8,20,1,20,1,20,1,20,1,21,3,21,300,8,21,
		1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,311,8,22,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,
		26,5,26,330,8,26,10,26,12,26,333,9,26,1,26,3,26,336,8,26,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,3,27,345,8,27,1,27,1,27,1,27,1,27,1,27,3,27,352,8,
		27,1,27,1,27,1,27,3,27,357,8,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,3,29,
		366,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,
		33,1,33,3,33,382,8,33,1,34,3,34,385,8,34,1,35,1,35,1,35,1,35,1,35,1,35,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,404,8,36,1,
		36,1,36,1,36,3,36,409,8,36,1,36,5,36,412,8,36,10,36,12,36,415,9,36,1,37,
		1,37,1,37,5,37,420,8,37,10,37,12,37,423,9,37,1,38,1,38,1,38,1,38,3,38,
		429,8,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,437,8,38,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,464,8,38,10,38,12,38,467,9,
		38,1,39,1,39,1,39,3,39,472,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,3,40,486,8,40,1,41,1,41,1,41,3,41,491,8,41,1,42,1,
		42,1,42,1,42,1,42,1,42,5,42,499,8,42,10,42,12,42,502,9,42,3,42,504,8,42,
		1,42,3,42,507,8,42,1,42,1,42,1,42,1,42,5,42,513,8,42,10,42,12,42,516,9,
		42,1,42,1,42,3,42,520,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,
		1,45,1,45,1,45,1,45,3,45,535,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
		46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
		47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,570,8,47,
		10,47,12,47,573,9,47,1,47,1,47,3,47,577,8,47,1,48,1,48,1,48,3,48,582,8,
		48,1,49,1,49,1,49,1,49,1,50,1,50,3,50,590,8,50,1,51,1,51,1,52,1,52,1,52,
		3,52,597,8,52,1,53,1,53,1,54,1,54,3,54,603,8,54,1,54,1,54,1,54,1,54,1,
		54,3,54,610,8,54,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,58,
		1,58,3,58,624,8,58,1,58,1,58,1,58,5,58,629,8,58,10,58,12,58,632,9,58,1,
		58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,641,8,59,1,59,1,59,1,59,1,59,1,60,
		1,60,3,60,649,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
		61,0,2,72,76,62,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,0,7,
		3,0,59,60,67,67,85,86,3,0,62,62,80,83,87,88,3,0,72,72,79,79,85,86,1,0,
		73,78,1,0,59,60,1,0,42,43,2,0,94,94,97,97,695,0,127,1,0,0,0,2,149,1,0,
		0,0,4,160,1,0,0,0,6,162,1,0,0,0,8,164,1,0,0,0,10,170,1,0,0,0,12,187,1,
		0,0,0,14,189,1,0,0,0,16,191,1,0,0,0,18,194,1,0,0,0,20,201,1,0,0,0,22,212,
		1,0,0,0,24,219,1,0,0,0,26,239,1,0,0,0,28,244,1,0,0,0,30,246,1,0,0,0,32,
		255,1,0,0,0,34,264,1,0,0,0,36,284,1,0,0,0,38,286,1,0,0,0,40,289,1,0,0,
		0,42,299,1,0,0,0,44,303,1,0,0,0,46,312,1,0,0,0,48,316,1,0,0,0,50,322,1,
		0,0,0,52,326,1,0,0,0,54,337,1,0,0,0,56,360,1,0,0,0,58,363,1,0,0,0,60,369,
		1,0,0,0,62,373,1,0,0,0,64,375,1,0,0,0,66,381,1,0,0,0,68,384,1,0,0,0,70,
		386,1,0,0,0,72,403,1,0,0,0,74,416,1,0,0,0,76,436,1,0,0,0,78,468,1,0,0,
		0,80,485,1,0,0,0,82,487,1,0,0,0,84,492,1,0,0,0,86,521,1,0,0,0,88,525,1,
		0,0,0,90,534,1,0,0,0,92,536,1,0,0,0,94,576,1,0,0,0,96,581,1,0,0,0,98,583,
		1,0,0,0,100,589,1,0,0,0,102,591,1,0,0,0,104,596,1,0,0,0,106,598,1,0,0,
		0,108,609,1,0,0,0,110,611,1,0,0,0,112,613,1,0,0,0,114,617,1,0,0,0,116,
		619,1,0,0,0,118,635,1,0,0,0,120,648,1,0,0,0,122,650,1,0,0,0,124,126,3,
		2,1,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,
		128,133,1,0,0,0,129,127,1,0,0,0,130,132,3,8,4,0,131,130,1,0,0,0,132,135,
		1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,139,1,0,0,0,135,133,1,0,0,
		0,136,138,3,122,61,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,
		140,1,0,0,0,140,146,1,0,0,0,141,139,1,0,0,0,142,145,3,10,5,0,143,145,3,
		24,12,0,144,142,1,0,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,
		0,146,147,1,0,0,0,147,1,1,0,0,0,148,146,1,0,0,0,149,150,5,37,0,0,150,155,
		3,4,2,0,151,152,5,55,0,0,152,154,3,4,2,0,153,151,1,0,0,0,154,157,1,0,0,
		0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,
		159,5,56,0,0,159,3,1,0,0,0,160,161,5,45,0,0,161,5,1,0,0,0,162,163,5,45,
		0,0,163,7,1,0,0,0,164,165,5,1,0,0,165,166,3,6,3,0,166,167,5,2,0,0,167,
		168,3,114,57,0,168,169,5,56,0,0,169,9,1,0,0,0,170,171,3,14,7,0,171,180,
		5,46,0,0,172,177,3,18,9,0,173,174,5,55,0,0,174,176,3,18,9,0,175,173,1,
		0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,181,1,0,0,0,
		179,177,1,0,0,0,180,172,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,183,
		5,47,0,0,183,184,5,57,0,0,184,185,3,28,14,0,185,186,3,12,6,0,186,11,1,
		0,0,0,187,188,3,30,15,0,188,13,1,0,0,0,189,190,5,45,0,0,190,15,1,0,0,0,
		191,192,5,79,0,0,192,193,3,76,38,0,193,17,1,0,0,0,194,195,3,62,31,0,195,
		196,5,57,0,0,196,199,3,28,14,0,197,200,3,16,8,0,198,200,3,20,10,0,199,
		197,1,0,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,19,1,0,0,0,201,202,5,48,
		0,0,202,207,3,22,11,0,203,204,5,55,0,0,204,206,3,22,11,0,205,203,1,0,0,
		0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,
		207,1,0,0,0,210,211,5,49,0,0,211,21,1,0,0,0,212,213,5,45,0,0,213,214,5,
		57,0,0,214,217,5,45,0,0,215,218,3,16,8,0,216,218,3,20,10,0,217,215,1,0,
		0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,23,1,0,0,0,219,220,5,6,0,0,220,
		223,5,45,0,0,221,222,5,12,0,0,222,224,3,28,14,0,223,221,1,0,0,0,223,224,
		1,0,0,0,224,227,1,0,0,0,225,226,5,22,0,0,226,228,3,120,60,0,227,225,1,
		0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,234,5,48,0,0,230,233,3,10,5,
		0,231,233,3,26,13,0,232,230,1,0,0,0,232,231,1,0,0,0,233,236,1,0,0,0,234,
		232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,238,5,
		49,0,0,238,25,1,0,0,0,239,240,5,45,0,0,240,241,5,57,0,0,241,242,3,72,36,
		0,242,243,5,56,0,0,243,27,1,0,0,0,244,245,5,45,0,0,245,29,1,0,0,0,246,
		250,5,48,0,0,247,249,3,36,18,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,
		1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,5,49,0,
		0,254,31,1,0,0,0,255,259,5,50,0,0,256,258,3,36,18,0,257,256,1,0,0,0,258,
		261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,259,1,
		0,0,0,262,263,5,51,0,0,263,33,1,0,0,0,264,267,3,60,30,0,265,266,5,54,0,
		0,266,268,3,76,38,0,267,265,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,
		270,5,56,0,0,270,35,1,0,0,0,271,285,3,30,15,0,272,285,3,38,19,0,273,285,
		3,44,22,0,274,285,3,48,24,0,275,285,3,50,25,0,276,285,3,52,26,0,277,285,
		3,58,29,0,278,285,3,40,20,0,279,285,3,46,23,0,280,285,3,42,21,0,281,285,
		3,34,17,0,282,285,3,122,61,0,283,285,3,118,59,0,284,271,1,0,0,0,284,272,
		1,0,0,0,284,273,1,0,0,0,284,274,1,0,0,0,284,275,1,0,0,0,284,276,1,0,0,
		0,284,277,1,0,0,0,284,278,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,284,
		281,1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,37,1,0,0,0,286,287,3,32,
		16,0,287,288,5,56,0,0,288,39,1,0,0,0,289,293,3,76,38,0,290,294,5,54,0,
		0,291,294,5,61,0,0,292,294,5,92,0,0,293,290,1,0,0,0,293,291,1,0,0,0,293,
		292,1,0,0,0,294,295,1,0,0,0,295,296,3,76,38,0,296,297,5,56,0,0,297,41,
		1,0,0,0,298,300,3,76,38,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,
		0,0,301,302,5,56,0,0,302,43,1,0,0,0,303,304,5,20,0,0,304,305,5,46,0,0,
		305,306,3,76,38,0,306,307,5,47,0,0,307,310,3,36,18,0,308,309,5,11,0,0,
		309,311,3,36,18,0,310,308,1,0,0,0,310,311,1,0,0,0,311,45,1,0,0,0,312,313,
		5,28,0,0,313,314,3,76,38,0,314,315,5,56,0,0,315,47,1,0,0,0,316,317,5,40,
		0,0,317,318,5,46,0,0,318,319,3,76,38,0,319,320,5,47,0,0,320,321,3,36,18,
		0,321,49,1,0,0,0,322,323,5,41,0,0,323,324,3,76,38,0,324,325,3,36,18,0,
		325,51,1,0,0,0,326,327,5,35,0,0,327,331,3,30,15,0,328,330,3,54,27,0,329,
		328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,335,1,
		0,0,0,333,331,1,0,0,0,334,336,3,56,28,0,335,334,1,0,0,0,335,336,1,0,0,
		0,336,53,1,0,0,0,337,356,5,5,0,0,338,344,5,46,0,0,339,340,3,62,31,0,340,
		341,5,57,0,0,341,342,3,72,36,0,342,345,1,0,0,0,343,345,3,72,36,0,344,339,
		1,0,0,0,344,343,1,0,0,0,345,351,1,0,0,0,346,347,5,39,0,0,347,348,5,46,
		0,0,348,349,3,76,38,0,349,350,5,47,0,0,350,352,1,0,0,0,351,346,1,0,0,0,
		351,352,1,0,0,0,352,353,1,0,0,0,353,354,5,47,0,0,354,357,1,0,0,0,355,357,
		1,0,0,0,356,338,1,0,0,0,356,355,1,0,0,0,357,358,1,0,0,0,358,359,3,30,15,
		0,359,55,1,0,0,0,360,361,5,14,0,0,361,362,3,30,15,0,362,57,1,0,0,0,363,
		365,5,34,0,0,364,366,3,76,38,0,365,364,1,0,0,0,365,366,1,0,0,0,366,367,
		1,0,0,0,367,368,5,56,0,0,368,59,1,0,0,0,369,370,3,62,31,0,370,371,5,57,
		0,0,371,372,3,72,36,0,372,61,1,0,0,0,373,374,5,45,0,0,374,63,1,0,0,0,375,
		376,5,52,0,0,376,377,3,66,33,0,377,378,5,53,0,0,378,65,1,0,0,0,379,382,
		3,68,34,0,380,382,3,70,35,0,381,379,1,0,0,0,381,380,1,0,0,0,382,67,1,0,
		0,0,383,385,3,74,37,0,384,383,1,0,0,0,384,385,1,0,0,0,385,69,1,0,0,0,386,
		387,3,62,31,0,387,388,5,22,0,0,388,389,3,76,38,0,389,390,5,89,0,0,390,
		391,3,76,38,0,391,71,1,0,0,0,392,393,6,36,-1,0,393,394,5,52,0,0,394,395,
		3,72,36,0,395,396,5,53,0,0,396,404,1,0,0,0,397,398,5,45,0,0,398,399,5,
		75,0,0,399,400,3,72,36,0,400,401,5,77,0,0,401,404,1,0,0,0,402,404,5,45,
		0,0,403,392,1,0,0,0,403,397,1,0,0,0,403,402,1,0,0,0,404,413,1,0,0,0,405,
		406,10,3,0,0,406,408,5,52,0,0,407,409,3,80,40,0,408,407,1,0,0,0,408,409,
		1,0,0,0,409,410,1,0,0,0,410,412,5,53,0,0,411,405,1,0,0,0,412,415,1,0,0,
		0,413,411,1,0,0,0,413,414,1,0,0,0,414,73,1,0,0,0,415,413,1,0,0,0,416,421,
		3,76,38,0,417,418,5,55,0,0,418,420,3,76,38,0,419,417,1,0,0,0,420,423,1,
		0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,75,1,0,0,0,423,421,1,0,0,0,424,
		425,6,38,-1,0,425,426,5,45,0,0,426,428,5,46,0,0,427,429,3,74,37,0,428,
		427,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,437,5,47,0,0,431,432,7,
		0,0,0,432,437,3,76,38,9,433,434,5,34,0,0,434,437,3,76,38,8,435,437,3,80,
		40,0,436,424,1,0,0,0,436,431,1,0,0,0,436,433,1,0,0,0,436,435,1,0,0,0,437,
		465,1,0,0,0,438,439,10,13,0,0,439,440,5,58,0,0,440,464,3,76,38,14,441,
		442,10,7,0,0,442,443,5,84,0,0,443,464,3,76,38,7,444,445,10,6,0,0,445,446,
		7,1,0,0,446,464,3,76,38,7,447,448,10,5,0,0,448,449,7,2,0,0,449,464,3,76,
		38,6,450,451,10,4,0,0,451,452,7,3,0,0,452,464,3,76,38,5,453,454,10,3,0,
		0,454,455,5,69,0,0,455,464,3,76,38,4,456,457,10,2,0,0,457,458,5,68,0,0,
		458,464,3,76,38,3,459,460,10,12,0,0,460,464,3,88,44,0,461,462,10,10,0,
		0,462,464,7,4,0,0,463,438,1,0,0,0,463,441,1,0,0,0,463,444,1,0,0,0,463,
		447,1,0,0,0,463,450,1,0,0,0,463,453,1,0,0,0,463,456,1,0,0,0,463,459,1,
		0,0,0,463,461,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,
		466,77,1,0,0,0,467,465,1,0,0,0,468,469,3,14,7,0,469,471,5,46,0,0,470,472,
		3,74,37,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,5,47,
		0,0,474,79,1,0,0,0,475,486,3,82,41,0,476,486,3,102,51,0,477,486,3,64,32,
		0,478,486,3,62,31,0,479,480,5,46,0,0,480,481,3,76,38,0,481,482,5,47,0,
		0,482,486,1,0,0,0,483,486,3,32,16,0,484,486,3,84,42,0,485,475,1,0,0,0,
		485,476,1,0,0,0,485,477,1,0,0,0,485,478,1,0,0,0,485,479,1,0,0,0,485,483,
		1,0,0,0,485,484,1,0,0,0,486,81,1,0,0,0,487,490,4,41,10,0,488,491,3,92,
		46,0,489,491,3,94,47,0,490,488,1,0,0,0,490,489,1,0,0,0,491,83,1,0,0,0,
		492,493,5,25,0,0,493,506,3,72,36,0,494,503,5,46,0,0,495,500,3,18,9,0,496,
		497,5,55,0,0,497,499,3,18,9,0,498,496,1,0,0,0,499,502,1,0,0,0,500,498,
		1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,503,495,1,0,0,
		0,503,504,1,0,0,0,504,505,1,0,0,0,505,507,5,47,0,0,506,494,1,0,0,0,506,
		507,1,0,0,0,507,519,1,0,0,0,508,509,5,48,0,0,509,514,3,86,43,0,510,511,
		5,55,0,0,511,513,3,86,43,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,1,0,
		0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,514,1,0,0,0,517,518,5,49,0,0,518,
		520,1,0,0,0,519,508,1,0,0,0,519,520,1,0,0,0,520,85,1,0,0,0,521,522,3,62,
		31,0,522,523,5,54,0,0,523,524,3,76,38,0,524,87,1,0,0,0,525,526,5,52,0,
		0,526,527,3,76,38,0,527,528,5,53,0,0,528,89,1,0,0,0,529,535,5,44,0,0,530,
		535,3,108,54,0,531,535,3,106,53,0,532,535,3,104,52,0,533,535,5,102,0,0,
		534,529,1,0,0,0,534,530,1,0,0,0,534,531,1,0,0,0,534,532,1,0,0,0,534,533,
		1,0,0,0,535,91,1,0,0,0,536,537,5,75,0,0,537,538,3,100,50,0,538,539,5,55,
		0,0,539,540,3,100,50,0,540,541,5,55,0,0,541,542,3,96,48,0,542,543,5,77,
		0,0,543,93,1,0,0,0,544,545,5,75,0,0,545,546,3,100,50,0,546,547,5,55,0,
		0,547,548,3,100,50,0,548,549,5,77,0,0,549,577,1,0,0,0,550,551,5,75,0,0,
		551,552,3,100,50,0,552,553,5,55,0,0,553,554,3,100,50,0,554,555,5,55,0,
		0,555,556,3,96,48,0,556,557,5,55,0,0,557,558,5,77,0,0,558,577,1,0,0,0,
		559,560,5,75,0,0,560,561,3,100,50,0,561,562,5,55,0,0,562,563,3,100,50,
		0,563,564,5,55,0,0,564,565,3,100,50,0,565,566,5,55,0,0,566,571,3,100,50,
		0,567,568,5,55,0,0,568,570,3,100,50,0,569,567,1,0,0,0,570,573,1,0,0,0,
		571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,575,
		5,77,0,0,575,577,1,0,0,0,576,544,1,0,0,0,576,550,1,0,0,0,576,559,1,0,0,
		0,577,95,1,0,0,0,578,582,3,100,50,0,579,582,3,90,45,0,580,582,3,64,32,
		0,581,578,1,0,0,0,581,579,1,0,0,0,581,580,1,0,0,0,582,97,1,0,0,0,583,584,
		5,45,0,0,584,585,5,57,0,0,585,586,5,45,0,0,586,99,1,0,0,0,587,590,3,98,
		49,0,588,590,3,76,38,0,589,587,1,0,0,0,589,588,1,0,0,0,590,101,1,0,0,0,
		591,592,3,90,45,0,592,103,1,0,0,0,593,597,5,114,0,0,594,597,5,115,0,0,
		595,597,5,113,0,0,596,593,1,0,0,0,596,594,1,0,0,0,596,595,1,0,0,0,597,
		105,1,0,0,0,598,599,7,5,0,0,599,107,1,0,0,0,600,602,5,98,0,0,601,603,7,
		6,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,610,1,0,0,0,604,610,5,99,0,0,
		605,610,5,100,0,0,606,610,5,101,0,0,607,610,5,106,0,0,608,610,5,107,0,
		0,609,600,1,0,0,0,609,604,1,0,0,0,609,605,1,0,0,0,609,606,1,0,0,0,609,
		607,1,0,0,0,609,608,1,0,0,0,610,109,1,0,0,0,611,612,5,45,0,0,612,111,1,
		0,0,0,613,614,5,45,0,0,614,615,5,58,0,0,615,616,5,45,0,0,616,113,1,0,0,
		0,617,618,5,93,0,0,618,115,1,0,0,0,619,620,5,19,0,0,620,623,5,45,0,0,621,
		622,5,22,0,0,622,624,3,120,60,0,623,621,1,0,0,0,623,624,1,0,0,0,624,625,
		1,0,0,0,625,626,5,54,0,0,626,630,5,48,0,0,627,629,3,40,20,0,628,627,1,
		0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,
		632,630,1,0,0,0,633,634,5,49,0,0,634,117,1,0,0,0,635,636,5,45,0,0,636,
		637,5,57,0,0,637,640,5,19,0,0,638,639,5,22,0,0,639,641,3,120,60,0,640,
		638,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,5,54,0,0,643,644,3,
		76,38,0,644,645,5,56,0,0,645,119,1,0,0,0,646,649,5,45,0,0,647,649,3,114,
		57,0,648,646,1,0,0,0,648,647,1,0,0,0,649,121,1,0,0,0,650,651,5,45,0,0,
		651,652,5,57,0,0,652,653,5,31,0,0,653,654,5,54,0,0,654,655,5,30,0,0,655,
		656,5,46,0,0,656,657,3,114,57,0,657,658,5,47,0,0,658,659,5,56,0,0,659,
		123,1,0,0,0,58,127,133,139,144,146,155,177,180,199,207,217,223,227,232,
		234,250,259,267,284,293,299,310,331,335,344,351,356,365,381,384,403,408,
		413,421,428,436,463,465,471,485,490,500,503,506,514,519,534,571,576,581,
		589,596,602,609,623,630,640,648
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
