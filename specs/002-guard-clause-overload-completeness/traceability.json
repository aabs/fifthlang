{
    "featureRequirements": {
        "FR-001": {
            "description": "Detect incomplete guard coverage",
            "tests": [
                "CompletenessAnalyzerTests.IsComplete_WithUnknownPredicates_ShouldReturnFalse",
                "GuardValidationIntegrationTests.IncompleteGuards_ShouldFailCompilation"
            ]
        },
        "FR-002": {
            "description": "Emit E1001 diagnostic for incomplete coverage",
            "tests": [
                "DiagnosticEmitterTests.EmitIncompleteError_ShouldEmitE1001Error",
                "GuardValidationIntegrationTests.IncompleteGuards_ShouldFailCompilation"
            ]
        },
        "FR-003": {
            "description": "Detect unreachable overloads",
            "tests": [
                "CompletenessAnalyzerTests.CheckForUnreachableOverloads_WithBaseFollowedByGuarded_ShouldDetectUnreachable",
                "CompletenessAnalyzerTests.CheckForUnreachableOverloads_WithOnlyGuardedOverloads_ShouldNotDetectUnreachable"
            ]
        },
        "FR-004": {
            "description": "Emit W1002 diagnostic for unreachable overloads",
            "tests": [
                "DiagnosticEmitterTests.EmitUnreachableWarning_ShouldEmitW1002WarningWithNote",
                "GuardValidationIntegrationTests.UnreachableGuards_ShouldCompileWithWarnings"
            ]
        },
        "FR-005": {
            "description": "Detect multiple base cases",
            "tests": [
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes"
            ]
        },
        "FR-006": {
            "description": "Emit E1005 diagnostic for multiple base cases",
            "tests": [
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes"
            ]
        },
        "FR-007": {
            "description": "Detect base case not in final position",
            "tests": [
                "CompletenessAnalyzerTests.ValidateBaseOrdering_WithBaseNotLast_ShouldReturnInvalidIndex",
                "CompletenessAnalyzerTests.ValidateBaseOrdering_WithBaseLast_ShouldReturnNull"
            ]
        },
        "FR-008": {
            "description": "Emit E1004 diagnostic for base not last",
            "tests": [
                "DiagnosticEmitterTests.EmitBaseNotLastError_ShouldEmitE1004ErrorWithNote"
            ]
        },
        "FR-009": {
            "description": "Detect excessive overload count",
            "tests": [
                "DiagnosticEmitterTests.EmitOverloadCountWarning_ShouldEmitW1101Warning"
            ]
        },
        "FR-010": {
            "description": "Emit W1101 diagnostic for overload count",
            "tests": [
                "DiagnosticEmitterTests.EmitOverloadCountWarning_ShouldEmitW1101Warning"
            ]
        },
        "FR-011": {
            "description": "Detect unknown predicate explosion",
            "tests": [
                "CompletenessAnalyzerTests.CalculateUnknownPercentage_ShouldReturnCorrectPercentage"
            ]
        },
        "FR-012": {
            "description": "Emit W1102 diagnostic for unknown explosion",
            "tests": [
                "DiagnosticEmitterTests.EmitUnknownExplosionWarning_ShouldEmitW1102Warning"
            ]
        },
        "FR-013": {
            "description": "Classify predicates as Base, Analyzable, or Unknown",
            "tests": [
                "PredicateNormalizerTests.ClassifyPredicate_WithNoConstraints_ShouldReturnBase",
                "PredicateNormalizerTests.ClassifyPredicate_WithTautology_ShouldReturnBase",
                "PredicateNormalizerTests.ClassifyPredicate_WithAnalyzableConstraint_ShouldReturnAnalyzable",
                "PredicateNormalizerTests.ClassifyPredicate_WithUnknownConstraint_ShouldReturnUnknown"
            ]
        },
        "FR-014": {
            "description": "Normalize guard predicates for analysis",
            "tests": [
                "PredicateNormalizerTests.AnalyzeOverload_ShouldCreateAnalyzedOverloadWithCorrectClassification",
                "PredicateNormalizerTests.CreatePredicateDescriptor_WithBaseType_ShouldReturnAlways",
                "PredicateNormalizerTests.CreatePredicateDescriptor_WithUnknownType_ShouldReturnUnknown"
            ]
        },
        "FR-015": {
            "description": "Perform subsumption analysis",
            "tests": [
                "CompletenessAnalyzerTests.CheckForUnreachableOverloads_WithBaseFollowedByGuarded_ShouldDetectUnreachable",
                "CompletenessAnalyzerTests.IsComplete_WithAnalyzableAndNoUnknown_ShouldReturnTrue"
            ]
        }
    },
    "acceptanceCriteria": {
        "AC-001": {
            "description": "Complete guard sets compile without errors",
            "tests": [
                "GuardValidationIntegrationTests.CompleteGuards_ShouldCompileWithoutErrors"
            ]
        },
        "AC-002": {
            "description": "Incomplete guard sets emit E1001",
            "tests": [
                "DiagnosticEmitterTests.EmitIncompleteError_ShouldEmitE1001Error",
                "GuardValidationIntegrationTests.IncompleteGuards_ShouldFailCompilation"
            ]
        },
        "AC-003": {
            "description": "Unreachable overloads emit W1002",
            "tests": [
                "DiagnosticEmitterTests.EmitUnreachableWarning_ShouldEmitW1002WarningWithNote",
                "GuardValidationIntegrationTests.UnreachableGuards_ShouldCompileWithWarnings"
            ]
        },
        "AC-004": {
            "description": "Multiple base cases emit E1005",
            "tests": [
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes"
            ]
        },
        "AC-005": {
            "description": "Base not last emits E1004",
            "tests": [
                "DiagnosticEmitterTests.EmitBaseNotLastError_ShouldEmitE1004ErrorWithNote"
            ]
        },
        "AC-006": {
            "description": "Excessive overloads emit W1101",
            "tests": [
                "DiagnosticEmitterTests.EmitOverloadCountWarning_ShouldEmitW1101Warning"
            ]
        },
        "AC-007": {
            "description": "Unknown explosion emits W1102",
            "tests": [
                "DiagnosticEmitterTests.EmitUnknownExplosionWarning_ShouldEmitW1102Warning"
            ]
        },
        "AC-008": {
            "description": "Validation overhead â‰¤5% of compilation time",
            "tests": [
                "ValidationInstrumenterTests.StartPhase_ShouldBeginTiming",
                "ValidationInstrumenterTests.EndPhase_ShouldRecordElapsedTime",
                "ValidationInstrumenterTests.MultiplePhases_ShouldTrackSeparately",
                "GuardValidationIntegrationTests.ValidatedFunction_ShouldHaveValidationMetrics"
            ]
        },
        "AC-009": {
            "description": "Only GuardCompletenessValidator is public",
            "tests": [
                "PublicSurfaceTests.GuardValidationModule_ShouldOnlyExposePhaseEntryPoint",
                "PublicSurfaceTests.GuardValidationSubmodules_ShouldOnlyContainInternalTypes",
                "PublicSurfaceTests.GuardValidationModule_ShouldContainExpectedInternalTypes"
            ]
        },
        "AC-010": {
            "description": "Deterministic diagnostic ordering",
            "tests": [
                "DiagnosticEmitterTests.EmitIncompleteError_ShouldEmitE1001Error",
                "DiagnosticEmitterTests.EmitUnreachableWarning_ShouldEmitW1002WarningWithNote",
                "DiagnosticEmitterTests.EmitBaseNotLastError_ShouldEmitE1004ErrorWithNote",
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes"
            ]
        },
        "AC-011": {
            "description": "Proper layering contract enforcement",
            "tests": [
                "PublicSurfaceTests.GuardValidationSubmodules_ShouldOnlyContainInternalTypes"
            ]
        },
        "AC-012": {
            "description": "Memory-efficient implementation",
            "tests": [
                "ValidationInstrumenterTests.Reset_ShouldClearAllMetrics",
                "ValidationInstrumenterTests.RecordFunctionGroupMetrics_ShouldUpdateCounts",
                "OverloadCollectorTests.Reset_ShouldClearAllFunctionGroups",
                "DiagnosticEmitterTests.Reset_ShouldClearAllDiagnostics"
            ]
        }
    },
    "testMapping": {
        "unitTests": [
            "CompletenessAnalyzerTests",
            "DiagnosticEmitterTests",
            "FunctionGroupTests",
            "OverloadCollectorTests",
            "PredicateDescriptorTests",
            "PredicateNormalizerTests",
            "ValidationInstrumenterTests"
        ],
        "integrationTests": [
            "GuardValidationIntegrationTests"
        ],
        "performanceTests": [
            "ValidationInstrumenterTests.StartPhase_ShouldBeginTiming",
            "ValidationInstrumenterTests.EndPhase_ShouldRecordElapsedTime",
            "ValidationInstrumenterTests.MultiplePhases_ShouldTrackSeparately"
        ]
    },
    "notes": {
        "created": "2025-09-24",
        "purpose": "Track traceability between requirements and test implementations",
        "status": "Populated with current test coverage - comprehensive mapping of 15 FRs and 12 ACs to existing test implementations",
        "coverage": {
            "featureRequirements": "15/15 mapped (100%)",
            "acceptanceCriteria": "12/12 mapped (100%)",
            "totalTests": "~40 individual test methods across 8 test classes"
        }
    }
}