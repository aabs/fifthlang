{
    "featureRequirements": {
        "FR-001": {
            "description": "Detect incomplete guard coverage",
            "tests": [
                "CompletenessAnalyzerTests.IsComplete_WithUnknownPredicates_ShouldReturnFalse",
                "GuardValidationIntegrationTests.IncompleteGuards_ShouldFailCompilation"
            ]
        },
        "FR-002": {
            "description": "Emit E1001 diagnostic for incomplete coverage",
            "tests": [
                "DiagnosticEmitterTests.EmitIncompleteError_ShouldEmitE1001Error",
                "GuardValidationIntegrationTests.IncompleteGuards_ShouldFailCompilation"
            ]
        },
        "FR-003": {
            "description": "Detect unreachable overloads",
            "tests": [
                "CompletenessAnalyzerTests.CheckForUnreachableOverloads_WithBaseFollowedByGuarded_ShouldDetectUnreachable",
                "CompletenessAnalyzerTests.CheckForUnreachableOverloads_WithOnlyGuardedOverloads_ShouldNotDetectUnreachable",
                "DuplicateDetectionTests.DuplicateGuards_ShouldBeDetectedAsUnreachable"
            ]
        },
        "FR-004": {
            "description": "Emit W1002 diagnostic for unreachable overloads",
            "tests": [
                "DiagnosticEmitterTests.EmitUnreachableWarning_ShouldEmitW1002WarningWithNote",
                "GuardValidationIntegrationTests.UnreachableGuards_ShouldCompileWithWarnings"
            ]
        },
        "FR-005": {
            "description": "Detect multiple base cases",
            "tests": [
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes"
            ]
        },
        "FR-006": {
            "description": "Emit E1005 diagnostic for multiple base cases",
            "tests": [
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes"
            ]
        },
        "FR-007": {
            "description": "Detect base case not in final position",
            "tests": [
                "CompletenessAnalyzerTests.ValidateBaseOrdering_WithBaseNotLast_ShouldReturnInvalidIndex",
                "CompletenessAnalyzerTests.ValidateBaseOrdering_WithBaseLast_ShouldReturnNull"
            ]
        },
        "FR-008": {
            "description": "Emit E1004 diagnostic for base not last",
            "tests": [
                "DiagnosticEmitterTests.EmitBaseNotLastError_ShouldEmitE1004ErrorWithNote"
            ]
        },
        "FR-009": {
            "description": "Detect excessive overload count",
            "tests": [
                "DiagnosticEmitterTests.EmitOverloadCountWarning_ShouldEmitW1101Warning"
            ]
        },
        "FR-010": {
            "description": "Emit W1101 diagnostic for overload count",
            "tests": [
                "DiagnosticEmitterTests.EmitOverloadCountWarning_ShouldEmitW1101Warning"
            ]
        },
        "FR-011": {
            "description": "Detect unknown predicate explosion",
            "tests": [
                "CompletenessAnalyzerTests.CalculateUnknownPercentage_ShouldReturnCorrectPercentage"
            ]
        },
        "FR-012": {
            "description": "Emit W1102 diagnostic for unknown explosion",
            "tests": [
                "DiagnosticEmitterTests.EmitUnknownExplosionWarning_ShouldEmitW1102Warning"
            ]
        },
        "FR-013": {
            "description": "Classify predicates as Base, Analyzable, or Unknown",
            "tests": [
                "PredicateNormalizerTests.ClassifyPredicate_WithNoConstraints_ShouldReturnBase",
                "PredicateNormalizerTests.ClassifyPredicate_WithTautology_ShouldReturnBase",
                "PredicateNormalizerTests.ClassifyPredicate_WithAnalyzableConstraint_ShouldReturnAnalyzable",
                "PredicateNormalizerTests.ClassifyPredicate_WithUnknownConstraint_ShouldReturnUnknown"
            ]
        },
        "FR-014": {
            "description": "Normalize guard predicates for analysis",
            "tests": [
                "PredicateNormalizerTests.AnalyzeOverload_ShouldCreateAnalyzedOverloadWithCorrectClassification",
                "PredicateNormalizerTests.CreatePredicateDescriptor_WithBaseType_ShouldReturnAlways",
                "PredicateNormalizerTests.CreatePredicateDescriptor_WithUnknownType_ShouldReturnUnknown",
                "IntervalFormationTests.Intersect_ClosedIntervals_ShouldReturnOverlap",
                "EmptyIntervalTests.IsEmpty_InvertedBounds_ShouldBeTrue",
                "EmptyIntervalTests.IsEmpty_OpenTouching_ShouldBeTrue"
            ]
        },
        "FR-015": {
            "description": "Perform subsumption analysis",
            "tests": [
                "CompletenessAnalyzerTests.CheckForUnreachableOverloads_WithBaseFollowedByGuarded_ShouldDetectUnreachable",
                "CompletenessAnalyzerTests.IsComplete_WithAnalyzableAndNoUnknown_ShouldReturnTrue",
                "IntervalSubsumptionTests.Subsumes_ClosedWithinClosed_ShouldBeTrue",
                "IntervalSubsumptionTests.Subsumes_PartialOverlap_ShouldBeFalse",
                "EmptyVsDuplicatePrecedenceTests.EmptyInterval_ShouldTakePrecedenceOverDuplicate"
            ]
        },
        "FR-016": {
            "description": "TBD",
            "tests": []
        },
        "FR-017": {
            "description": "TBD",
            "tests": []
        },
        "FR-018": {
            "description": "TBD",
            "tests": []
        },
        "FR-019": {
            "description": "TBD",
            "tests": []
        },
        "FR-020": {
            "description": "TBD",
            "tests": []
        },
        "FR-021": {
            "description": "TBD",
            "tests": []
        },
        "FR-022": {
            "description": "TBD",
            "tests": []
        },
        "FR-023": {
            "description": "TBD",
            "tests": []
        },
        "FR-024": {
            "description": "TBD",
            "tests": []
        },
        "FR-025": {
            "description": "TBD",
            "tests": []
        },
        "FR-026": {
            "description": "TBD",
            "tests": []
        },
        "FR-027": {
            "description": "TBD",
            "tests": []
        },
        "FR-028": {
            "description": "TBD",
            "tests": []
        },
        "FR-029": {
            "description": "TBD",
            "tests": []
        },
        "FR-030": {
            "description": "TBD",
            "tests": []
        },
        "FR-031": {
            "description": "TBD",
            "tests": []
        },
        "FR-032": {
            "description": "TBD",
            "tests": []
        },
        "FR-033": {
            "description": "TBD",
            "tests": []
        },
        "FR-034": {
            "description": "TBD",
            "tests": []
        },
        "FR-035": {
            "description": "TBD",
            "tests": []
        },
        "FR-036": {
            "description": "TBD",
            "tests": []
        },
        "FR-037": {
            "description": "TBD",
            "tests": []
        },
        "FR-038": {
            "description": "TBD",
            "tests": []
        },
        "FR-039": {
            "description": "TBD",
            "tests": []
        },
        "FR-040": {
            "description": "TBD",
            "tests": []
        },
        "FR-041": {
            "description": "TBD",
            "tests": []
        },
        "FR-042": {
            "description": "TBD",
            "tests": []
        },
        "FR-043": {
            "description": "TBD",
            "tests": []
        },
        "FR-044": {
            "description": "TBD",
            "tests": []
        },
        "FR-045": {
            "description": "TBD",
            "tests": []
        },
        "FR-046": {
            "description": "TBD",
            "tests": []
        },
        "FR-047": {
            "description": "TBD",
            "tests": []
        },
        "FR-048": {
            "description": "TBD",
            "tests": []
        },
        "FR-049": {
            "description": "TBD",
            "tests": []
        },
        "FR-050": {
            "description": "TBD",
            "tests": []
        },
        "FR-051": {
            "description": "TBD",
            "tests": []
        },
        "FR-052": {
            "description": "TBD",
            "tests": []
        },
        "FR-053": {
            "description": "TBD",
            "tests": []
        },
        "FR-054": {
            "description": "TBD",
            "tests": []
        },
        "FR-055": {
            "description": "TBD",
            "tests": []
        },
        "FR-056": {
            "description": "TBD",
            "tests": []
        },
        "FR-057": {
            "description": "TBD",
            "tests": []
        },
        "FR-058": {
            "description": "TBD",
            "tests": []
        },
        "FR-059": {
            "description": "TBD",
            "tests": []
        },
        "FR-060": {
            "description": "TBD",
            "tests": []
        },
        "FR-061": {
            "description": "TBD",
            "tests": []
        },
        "FR-062": {
            "description": "TBD",
            "tests": []
        },
        "FR-063": {
            "description": "TBD",
            "tests": []
        },
        "FR-064": {
            "description": "TBD",
            "tests": []
        },
        "FR-065": {
            "description": "TBD",
            "tests": []
        },
        "FR-066": {
            "description": "TBD",
            "tests": []
        },
        "FR-067": {
            "description": "TBD",
            "tests": []
        },
        "FR-068": {
            "description": "TBD",
            "tests": []
        },
        "FR-069": {
            "description": "TBD",
            "tests": []
        },
        "FR-070": {
            "description": "TBD",
            "tests": []
        }
    },
    "acceptanceCriteria": {
        "AC-001": {
            "description": "Complete guard sets compile without errors",
            "tests": [
                "GuardValidationIntegrationTests.CompleteGuards_ShouldCompileWithoutErrors",
                "BooleanExhaustiveTests.BooleanPair_ShouldBeConsideredCompleteWithoutBase"
            ]
        },
        "AC-002": {
            "description": "Incomplete guard sets emit E1001",
            "tests": [
                "DiagnosticEmitterTests.EmitIncompleteError_ShouldEmitE1001Error",
                "GuardValidationIntegrationTests.IncompleteGuards_ShouldFailCompilation",
                "IncompletenessTests.IncompleteWithoutBase_ShouldEmitE1001"
            ]
        },
        "AC-003": {
            "description": "Unreachable overloads emit W1002",
            "tests": [
                "DiagnosticEmitterTests.EmitUnreachableWarning_ShouldEmitW1002WarningWithNote",
                "GuardValidationIntegrationTests.UnreachableGuards_ShouldCompileWithWarnings",
                "UnreachableAfterBaseTests.AfterBase_AnalyzableStillWarnsUnreachable"
            ]
        },
        "AC-004": {
            "description": "Multiple base cases emit E1005",
            "tests": [
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes"
            ]
        },
        "AC-005": {
            "description": "Base not last emits E1004",
            "tests": [
                "DiagnosticEmitterTests.EmitBaseNotLastError_ShouldEmitE1004ErrorWithNote",
                "BaseNotLastCoverageTests.BaseNotLast_ShouldStillAllowE1001"
            ]
        },
        "AC-006": {
            "description": "Excessive overloads emit W1101",
            "tests": [
                "DiagnosticEmitterTests.EmitOverloadCountWarning_ShouldEmitW1101Warning",
                "OverloadCountWarningTests.CountAt32_ShouldNotWarn",
                "OverloadCountWarningTests.CountAt33_ShouldWarn"
            ]
        },
        "AC-007": {
            "description": "Unknown explosion emits W1102",
            "tests": [
                "DiagnosticEmitterTests.EmitUnknownExplosionWarning_ShouldEmitW1102Warning",
                "ExplosionThresholdTests.UnknownPercent_JustBelowThreshold_ShouldNotWarn",
                "ExplosionThresholdTests.UnknownPercent_JustAboveThreshold_ShouldWarn"
            ]
        },
        "AC-008": {
            "description": "Validation overhead ≤5% of compilation time",
            "tests": [
                "ValidationInstrumenterTests.StartPhase_ShouldBeginTiming",
                "ValidationInstrumenterTests.EndPhase_ShouldRecordElapsedTime",
                "ValidationInstrumenterTests.MultiplePhases_ShouldTrackSeparately",
                "GuardValidationIntegrationTests.ValidatedFunction_ShouldHaveValidationMetrics"
            ]
        },
        "AC-009": {
            "description": "Only GuardCompletenessValidator is public",
            "tests": [
                "PublicSurfaceTests.GuardValidationModule_ShouldOnlyExposePhaseEntryPoint",
                "PublicSurfaceTests.GuardValidationSubmodules_ShouldOnlyContainInternalTypes",
                "PublicSurfaceTests.GuardValidationModule_ShouldContainExpectedInternalTypes"
            ]
        },
        "AC-010": {
            "description": "Deterministic diagnostic ordering",
            "tests": [
                "DiagnosticEmitterTests.EmitIncompleteError_ShouldEmitE1001Error",
                "DiagnosticEmitterTests.EmitUnreachableWarning_ShouldEmitW1002WarningWithNote",
                "DiagnosticEmitterTests.EmitBaseNotLastError_ShouldEmitE1004ErrorWithNote",
                "DiagnosticEmitterTests.EmitMultipleBaseError_ShouldEmitE1005ErrorWithNotes",
                "DeterminismHashTests.DiagnosticsSignature_ShouldBeDeterministicAcrossTwoRuns"
            ]
        },
        "AC-011": {
            "description": "Proper layering contract enforcement",
            "tests": [
                "PublicSurfaceTests.GuardValidationSubmodules_ShouldOnlyContainInternalTypes"
            ]
        },
        "AC-012": {
            "description": "Memory-efficient implementation",
            "tests": [
                "ValidationInstrumenterTests.Reset_ShouldClearAllMetrics",
                "ValidationInstrumenterTests.RecordFunctionGroupMetrics_ShouldUpdateCounts",
                "OverloadCollectorTests.Reset_ShouldClearAllFunctionGroups",
                "DuplicateDetectionTests",
                "EmptyVsDuplicatePrecedenceTests",
                "BooleanExhaustiveTests",
                "IncompletenessTests",
                "MultipleBasePrecedenceTests",
                "BaseNotLastCoverageTests",
                "UnreachableAfterBaseTests",
                "ExplosionThresholdTests",
                "OverloadCountWarningTests",
                "DeterminismHashTests",
                "DiagnosticEmitterTests.Reset_ShouldClearAllDiagnostics"
            ]
        },
        "AC-013": {
            "description": "TBD",
            "tests": []
        },
        "AC-014": {
            "description": "TBD",
            "tests": []
        },
        "AC-015": {
            "description": "TBD",
            "tests": []
        },
        "AC-016": {
            "description": "TBD",
            "tests": []
        },
        "AC-017": {
            "description": "TBD",
            "tests": []
        },
        "AC-018": {
            "description": "TBD",
            "tests": []
        },
        "AC-019": {
            "description": "TBD",
            "tests": []
        },
        "AC-020": {
            "description": "TBD",
            "tests": []
        },
        "AC-021": {
            "description": "TBD",
            "tests": []
        },
        "AC-022": {
            "description": "TBD",
            "tests": []
        },
        "AC-023": {
            "description": "TBD",
            "tests": []
        },
        "AC-024": {
            "description": "TBD",
            "tests": []
        },
        "AC-025": {
            "description": "TBD",
            "tests": []
        },
        "AC-026": {
            "description": "TBD",
            "tests": []
        },
        "AC-027": {
            "description": "TBD",
            "tests": []
        },
        "AC-028": {
            "description": "TBD",
            "tests": []
        },
        "AC-029": {
            "description": "TBD",
            "tests": []
        },
        "AC-030": {
            "description": "TBD",
            "tests": []
        },
        "AC-031": {
            "description": "TBD",
            "tests": []
        },
        "AC-032": {
            "description": "TBD",
            "tests": []
        },
        "AC-033": {
            "description": "TBD",
            "tests": []
        },
        "AC-034": {
            "description": "TBD",
            "tests": []
        },
        "AC-035": {
            "description": "TBD",
            "tests": []
        },
        "AC-036": {
            "description": "TBD",
            "tests": []
        },
        "AC-037": {
            "description": "TBD",
            "tests": []
        },
        "AC-038": {
            "description": "TBD",
            "tests": []
        }
    },
    "testMapping": {
        "unitTests": [
            "CompletenessAnalyzerTests",
            "DiagnosticEmitterTests",
            "FunctionGroupTests",
            "OverloadCollectorTests",
            "PredicateDescriptorTests",
            "PredicateNormalizerTests",
            "IntervalFormationTests",
            "EmptyIntervalTests",
            "IntervalSubsumptionTests",
            "ValidationInstrumenterTests"
        ],
        "integrationTests": [
            "GuardValidationIntegrationTests"
        ],
        "performanceTests": [
            "ValidationInstrumenterTests.StartPhase_ShouldBeginTiming",
            "ValidationInstrumenterTests.EndPhase_ShouldRecordElapsedTime",
            "ValidationInstrumenterTests.MultiplePhases_ShouldTrackSeparately"
        ]
    },
    "notes": {
        "created": "2025-09-24",
        "purpose": "Track traceability between requirements and test implementations",
        "status": "Populated with current test coverage - expanded to include placeholder entries for remaining requirements and acceptance criteria",
        "coverage": {
            "featureRequirements": "15/70 mapped (21%)",
            "acceptanceCriteria": "12/38 mapped (31%)",
            "totalTests": "~40 individual test methods across 8 test classes"
        }
    }
}