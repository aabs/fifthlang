name: Roslyn Backend Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  guard-global-json:
    name: "Guard: global.json change"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for global.json modifications and required approval label
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request
            if (!pr) {
              core.info('No pull_request context — skipping global.json guard.')
              return
            }
            core.info(`PR #${pr.number} detected — enumerating changed files...`)
            const files = await github.paginate('GET /repos/{owner}/{repo}/pulls/{pull_number}/files', {
              ...context.repo,
              pull_number: pr.number,
            })
            const filenames = files.map(f => f.filename)
            core.info(`Files changed: ${filenames.join(', ')}`)
            const modifiesGlobal = filenames.includes('global.json')
            if (!modifiesGlobal) {
              core.info('global.json not modified in this PR — guard passed.')
              return
            }
            core.info('global.json modified in this PR — verifying label presence...')
            const labels = (pr.labels || []).map(l => l.name)
            const approved = labels.includes('toolchain-change-approved') || labels.includes('global-json-approved')
            if (!approved) {
              core.setFailed('PR modifies global.json but lacks required approval label (toolchain-change-approved or global-json-approved). Obtain constitution amendment or add the label to proceed.')
            } else {
              core.info('global.json change approved via PR label — guard passed.')
            }

  validate:
    name: Validate Roslyn backend (SDK matrix)
    needs: guard-global-json
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        dotnet: ['8.0.x', '10.0.100-rc']
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify tool versions
        shell: bash
        run: |
          dotnet --info
          java -version

      - name: Restore
        shell: bash
        run: dotnet restore fifthlang.sln

      - name: Make generator check executable
        shell: bash
        run: |
          if [ -f ./scripts/check-generated.sh ]; then chmod +x ./scripts/check-generated.sh; fi

      - name: Generator consistency check
        shell: bash
        run: |
          if [ -f ./scripts/check-generated.sh ]; then ./scripts/check-generated.sh; else echo 'No generator check script present; skipping'; fi

      - name: Build solution
        shell: bash
        run: dotnet build fifthlang.sln --configuration Release --no-restore

      - name: Run core test suites
        shell: bash
        run: |
          echo "Running AST tests..."
          dotnet test test/ast-tests/ast_tests.csproj --configuration Release --no-build --verbosity normal
          
          echo "Running runtime integration tests..."
          dotnet test test/runtime-integration-tests/runtime-integration-tests.csproj --configuration Release --no-build --verbosity normal || true

      - name: Test Roslyn backend compilation
        shell: bash
        run: |
          echo "Creating simple Fifth test program..."
          cat > /tmp/roslyn_test.5th << 'EOF'
          main(): int {
              x: int = 10;
              y: int = 32;
              return x + y;
          }
          EOF
          
          echo "Testing Roslyn backend compilation..."
          dotnet run --project src/compiler/compiler.csproj --configuration Release --no-build -- \
            --source /tmp/roslyn_test.5th \
            --output /tmp/roslyn_test.exe \
            --backend roslyn \
            --diagnostics
          
          echo "Verifying compiled program executes..."
          dotnet /tmp/roslyn_test.exe
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 42 ]; then
            echo "ERROR: Expected exit code 42 but got $EXIT_CODE"
            exit 1
          fi
          echo "✓ Roslyn backend test passed!"

      - name: Test Legacy backend (for comparison)
        shell: bash
        run: |
          echo "Testing legacy backend compilation..."
          dotnet run --project src/compiler/compiler.csproj --configuration Release --no-build -- \
            --source /tmp/roslyn_test.5th \
            --output /tmp/legacy_test.exe \
            --backend legacy \
            --diagnostics
          
          echo "Verifying compiled program executes..."
          dotnet /tmp/legacy_test.exe
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 42 ]; then
            echo "ERROR: Expected exit code 42 but got $EXIT_CODE"
            exit 1
          fi
          echo "✓ Legacy backend test passed!"

      - name: Run Roslyn PDB verification tests
        shell: bash
        run: |
          dotnet test test/runtime-integration-tests/runtime-integration-tests.csproj --configuration Release --no-build --filter FullyQualifiedName~RoslynPdbVerificationTests || true

      - name: Run Mapping unit tests
        shell: bash
        run: |
          dotnet test test/ast-tests/ast_tests.csproj --configuration Release --no-build --filter FullyQualifiedName~LoweredToRoslynMappingTests || true

      - name: Package and upload artifacts for inspection
        uses: actions/upload-artifact@v4
        with:
          name: roslyn-artifacts-${{ matrix.os }}-${{ matrix.dotnet }}
          path: |
            **/bin/Release/**/*.dll
            **/bin/Release/**/*.pdb
            TestResults/**/*.trx
            parser-check-*.log
