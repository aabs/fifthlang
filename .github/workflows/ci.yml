name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *' # Nightly at 03:00 UTC

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.415'

      - name: Setup Java 17 (for ANTLR)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify tool versions
        shell: bash
        run: |
          dotnet --info
          java -version

      - name: Restore
        run: dotnet restore fifthlang.sln

      - name: Build
        run: dotnet build fifthlang.sln --configuration Release --no-restore

      - name: Validate .5th samples (parser-check) (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "Running parser-check across .5th sample files..."
          LOGFILE="parser-check-$(uname -s | tr '[:upper:]' '[:lower:]').log"
          set -o pipefail
          dotnet run --project src/tools/validate-examples/validate-examples.csproj --configuration Release 2>&1 | tee "$LOGFILE"
          rc=${PIPESTATUS[0]}
          if [ $rc -ne 0 ]; then
            echo "Parser-check failed; see $LOGFILE" >&2
            exit $rc
          fi

      - name: Validate .5th samples (parser-check) (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host 'Running parser-check across .5th sample files...'
          $log = "parser-check-windows.log"
          dotnet run --project src/tools/validate-examples/validate-examples.csproj --configuration Release 2>&1 | Tee-Object -FilePath $log
          if ($LASTEXITCODE -ne 0) { Write-Error "Parser-check failed; see $log"; exit $LASTEXITCODE }

      - name: Run all tests (solution) (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          dotnet test fifthlang.sln \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=solution.trx" \
            --results-directory "TestResults/solution" \
            --collect:"XPlat Code Coverage" \
            --settings fifth.runsettings

      - name: Run all tests (solution) (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          dotnet test fifthlang.sln --configuration Release --no-build --logger "trx;LogFileName=solution.trx" --results-directory "TestResults/solution" --collect:"XPlat Code Coverage" --settings fifth.runsettings

      - name: List TRX and coverage
        if: always()
        shell: bash
        run: |
          echo "TRX files:" && ls -1 TestResults/**/*.trx 2>/dev/null || true
          echo "Coverage (cobertura):" && ls -1 **/coverage.cobertura.xml 2>/dev/null || true

      - name: Upload TRX results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: TestResults/**/*.trx
          if-no-files-found: warn

      - name: Install ReportGenerator
        if: always()
        shell: bash
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Generate Coverage Report
        if: always()
        shell: bash
        run: |
          if compgen -G "**/coverage.cobertura.xml" > /dev/null; then
            reportgenerator \
              -reports:**/coverage.cobertura.xml \
              -targetdir:CoverageReport \
              -reporttypes:Html;Cobertura;TextSummary
            echo "\nCoverage summary (partial):\n" >> $GITHUB_STEP_SUMMARY
            if [ -f CoverageReport/Summary.txt ]; then head -n 50 CoverageReport/Summary.txt >> $GITHUB_STEP_SUMMARY; fi
          else
            echo "No coverage files found; skipping report generation." | tee -a $GITHUB_STEP_SUMMARY
            mkdir -p CoverageReport
          fi

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.os }}
          path: |
            CoverageReport/**
            **/coverage.cobertura.xml
          if-no-files-found: warn

      - name: Upload parser-check logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: parser-check-logs-${{ matrix.os }}
          path: |
            parser-check-*.log
          if-no-files-found: warn

